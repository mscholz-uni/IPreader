#!/usr/bin/wish8.6 -f
package require BLT
package require img::png
package require img::tiff
package require tiff
package require png
package require math::statistics
#tcllib is required
set project_directory [file dirname [info script]]
load [file join $project_directory tiffread1[info sharedlibextension]]
#important: a released version must not have more than 3 characters for the version number
#otherwise export to STOE raw will not work
set gui(version) 1.8
set gui(fontbold) "helvetica 10 bold"
set gui(fontbigbold) "helvetica 11 bold"
set gui(fontnormal) "helvetica 10 normal"
set gui(widthcomment) 40
set gui(widtherror) 6
set gui(widthentry) 8
set gui(graphwidth) [expr [winfo screenwidth .]-150]
set gui(graphheight) [expr [winfo screenheight .]/3-40]
set gui(imagewidth) [expr [winfo screenwidth .]-150]
set gui(imageheight) [expr [winfo screenheight .]/3-40]
#picture width and height in pixels
set gui(pich) 0
set gui(picw) 0
#picture resolution in pixelsize in meter
set gui(picres) 0
set gui(subsamplew) 0
set gui(subsampleh) 0
set gui(picthumbh) 0
set gui(picthumbw) 0
set gui(bit) 16
set gui(maxyvalue) 65535
set gui(sampletypes) [list "SRM1878b-low-SiO2" "SRM640f-Si-diamond" "CaWO4 tetragonal" "C-diamond" "SRM660C-LaB6" "sample"]
set gui(refdatasets) [list "refSiO2alpha" "refSi" "refCaWO4" "refC" "refLaB6"]
set gui(sampletype1) "sample"
set gui(sampletype0) "sample"
set gui(radiations) [list CuKalpha1 MoKalpha1 WKalpha1 CrKalpha1 AgKalpha1]
set gui(radiation) CuKalpha1
#source of wavelengths: Cu, Mo, W -> COdata2010;
#                       Cr, Ag, -> Int.Tab.Cryst. Vol. C, Table 4.2.2.4
set gui(wavelengths) [list 1.54059313 0.70931711 0.20901312 2.2897260 0.55942178]
set gui(wavelength) 1.54059313
set gui(scaleA) 0.0
set gui(scaleB) 0.99401602354
set gui(scaleAerror) -1
set gui(scaleBerror) -1
set gui(numpoints) -1
set gui(xdata00) [list 0.0 100.0]
set gui(xdata01) [list 0.0 100.0]
set gui(filename) "empty"
set gui(midgraphfitted) 0
set gui(botgraphfitted) 0
set gui(gamma) 1.0
set gui(gammascale) 10
######################
catch {tk_getOpenFile foo bar}
set ::tk::dialog::file::showHiddenBtn 0
set ::tk::dialog::file::showHiddenVar 0

#reference Si 51688 for hkl and intensities
#I l k h
#lattice parameters from SRM640f certificate
set gui(refSi) [list [list 5.431144 5.431144 5.431144 90.0 90.0 90.0] [list \
{2178659.04	1	1	1	} \
{1625756.25	0	2	2	} \
{1018931.98	1	1	3	} \
{287149.70	0	0	4	} \
{434750.87	1	3	3	} \
{581734.94	2	2	4	} \
{234541.68	1	1	5	} \
{78180.51	3	3	3	} \
{168987.48	0	4	4	} \
{281781.83	1	3	5	} \
{212311.77	0	2	6	} \
{90504.98	3	3	5	} \
{46946.32	4	4	4	} \
{61067.69	1	1	7	} \
{61067.74	1	5	5	} \
{194992.96	2	4	6	} \
{85749.02	1	3	7	} \
{42874.46	3	5	5	} \
{17491.29	0	0	8	} \
{31150.29	3	3	7	} \
{51840.45	2	2	8	} \
{25920.22	0	6	6	} \
{46685.89	1	5	7	} \
{7780.99 	5	5	5	} \
{39561.01	0	4	8	} \
{18003.76	1	1	9	} \
{36007.53	3	5	7	} \
{31043.73	4	6	6	} \
{28543.45	1	3	9	} \
{25020.86	4	4	8	} \
{11616.19	3	3	9	} \
{11616.19	1	7	7	} \
{11616.18	5	5	7	} \
{20695.70	0	2	10	} \
{41391.41	2	6	8	} \
{19400.17	1	5	9	} \
{9700.07 	3	7	7	} \
{16608.06	3	5	9	} \
{30514.69	2	4	10	} \
{7282.35 	1	1	11	} \
{7282.36 	5	7	7	} \
{6788.80 	0	8	8	} \
{13073.50	1	3	11	} \
{13073.48	1	7	9	} \
{6536.75 	5	5	9	} \
{12360.40	0	6	10	} \
{12360.40	6	6	8	} \
{6000.23 	3	3	11	} \
{12000.48	3	7	9	} \
{2875.07 	0	0	12	} \
{11500.30	4	8	8	} \
{11254.40	1	5	11	} \
{1875.73 	7	7	7	} \
{10926.04	2	2	12	} \
{21852.07	4	6	10	} \
{10774.30	3	5	11	} \
{10774.28	5	7	9	} \
{10591.44	0	4	12	} \
{5260.91 	1	9	9	} \
{20940.52	2	8	10	} \
{5238.80 	1	1	13	} \
{10477.61	1	7	11	} \
{5238.79 	5	5	11	} \
{5238.79 	3	9	9	} \
]]

#reference alpha-SiO2 162490 for hkl and intensities
#I l k h
#lattice parameters from SRM1878b certificate
set gui(refSiO2alpha) [list [list 4.91378 4.91378 5.40536 90.0 90.0 120.0] [list \
{15.44	0	1	0	} \
{38.78	0	1	1	} \
{25.01	-1	1	1	} \
{18.78	-1	2	0	} \
{10.15	0	1	2	} \
{17.16	-1	1	2	} \
{9.90	-1	2	1	} \
{17.25	0	2	0	} \
{9.01	0	2	1	} \
{14.47	-2	2	1	} \
{24.97	-1	2	2	} \
{8.69	0	0	3	} \
{20.14	0	2	2	} \
{9.54	-2	2	2	} \
{14.50	0	1	3	} \
{2.25	-1	1	3	} \
{4.24	-1	3	0	} \
{19.78	-1	3	1	} \
{17.56	-2	3	1	} \
{12.53	-1	2	3	} \
{9.29	0	3	0	} \
{20.90	-1	3	2	} \
{12.25	-2	3	2	} \
{16.64	0	2	3	} \
{33.69	-2	2	3	} \
{29.93	0	3	1	} \
{1.62	-3	3	1	} \
{10.52	0	1	4	} \
{21.19	-1	1	4	} \
{15.30	0	3	2	} \
{22.50	-3	3	2	} \
{20.22	-2	4	0	} \
{9.20	-1	3	3	} \
{18.96	-2	3	3	} \
{10.95	-2	4	1	} \
{19.39	-1	2	4	} \
{20.61	-1	4	0	} \
{15.08	-1	4	1	} \
{8.07	-3	4	1	} \
{1.78	0	2	4	} \
{9.45	-2	2	4	} \
{2.42	-2	4	2	} \
{3.53	0	3	3	} \
{9.28	-3	3	3	} \
{19.54	-1	4	2	} \
{12.08	-3	4	2	} \
{13.72	0	4	0	} \
{20.86	0	1	5	} \
{11.51	-1	1	5	} \
{6.19	0	4	1	} \
{19.19	-4	4	1	} \
{3.32	-1	3	4	} \
{16.96	-2	3	4	} \
{16.26	-2	4	3	} \
{9.99	0	4	2	} \
{3.11	-4	4	2	} \
{13.96	-1	2	5	} \
{7.94	-1	4	3	} \
{6.83	-3	4	3	} \
{8.34	0	3	4	} \
{6.40	-3	3	4	} \
{12.61	-2	5	0	} \
{4.13	0	2	5	} \
{1.39	-2	2	5	} \
{17.81	-2	5	1	} \
{1.18	-3	5	1	} \
{3.88	-1	5	0	} \
{3.32	-2	5	2	} \
{9.96	-3	5	2	} \
{13.09	0	4	3	} \
{17.93	-4	4	3	} \
{6.37	-1	5	1	} \
{16.27	-4	5	1	} \
{10.91	-2	4	4	} \
{14.29	0	0	6	} \
{14.26	-1	3	5	} \
{4.88	-2	3	5	} \
{7.01	-1	4	4	} \
{11.88	-3	4	4	} \
{9.97	-1	1	6	} \
{9.30	-1	5	2	} \
{7.35	-4	5	2	} \
{3.15	0	3	5	} \
{8.37	-3	3	5	} \
{1.93	-2	5	3	} \
{0.65	-3	5	3	} \
{7.12	-1	2	6	} \
{5.77	0	5	1	} \
{1.55	-5	5	1	} \
{6.73	0	4	4	} \
{2.62	-4	4	4	} \
{21.58	0	2	6	} \
{9.80	-2	2	6	} \
{17.34	-1	5	3	} \
{4.91	-4	5	3	} \
{13.76	-3	6	0	} \
{1.75	0	5	2	} \
{23.84	-5	5	2	} \
{11.59	-2	4	5	} \
{11.15	-3	6	1	} \
{15.02	-2	6	0	} \
{9.14	-1	4	5	} \
{6.46	-3	4	5	} \
{7.84	-2	6	1	} \
{4.10	-4	6	1	} \
{19.09	-2	5	4	} \
{7.78	-3	5	4	} \
{11.79	-1	3	6	} \
{4.31	-2	3	6	} \
{1.59	-3	6	2	} \
{13.03	-2	6	2	} \
{5.84	-4	6	2	} \
{3.07	-5	5	3	} \
{2.84	-1	5	4	} \
{12.92	-4	5	4	} \
{7.54	-1	6	0	} \
{8.21	0	3	6	} \
{2.56	-3	3	6	} \
{11.68	0	1	7	} \
{0.51	-1	1	7	} \
{1.16	0	4	5	} \
{6.63	-4	4	5	} \
{1.53	-1	6	1	} \
{13.72	-5	6	1	} \
{10.00	-3	6	3	} \
{10.47	-1	2	7	} \
{8.11	-1	6	2	} \
{3.77	-5	6	2	} \
{9.09	-2	6	3	} \
{8.17	-4	6	3	} \
{11.60	-2	4	6	} \
{5.72	0	2	7	} \
{6.60	-2	2	7	} \
{7.13	-2	5	5	} \
{18.75	-3	5	5	} \
{16.78	0	5	4	} \
{2.72	-5	5	4	} \
{6.24	-1	4	6	} \
{7.60	-3	4	6	} \
{4.56	0	6	0	} \
{12.98	-1	5	5	} \
{2.56	-4	5	5	} \
{10.07	-1	6	3	} \
{13.83	-5	6	3	} \
{3.22	0	6	1	} \
{11.83	-6	6	1	} \
{8.24	-3	6	4	} \
{3.72	-3	7	0	} \
{8.41	-1	3	7	} \
{11.04	-2	3	7	} \
{9.64	-3	7	1	} \
{10.91	-4	7	1	} \
{6.96	-2	6	4	} \
{8.62	-4	6	4	} \
{13.17	0	4	6	} \
{8.29	-4	4	6	} \
{4.78	0	6	2	} \
{10.26	-6	6	2	} \
{1.42	-2	7	0	} \
{15.26	0	3	7	} \
{7.38	-3	3	7	} \
{12.26	-3	7	2	} \
{3.91	-4	7	2	} \
{15.42	-2	7	1	} \
{4.85	-5	7	1	} \
{3.29	0	5	5	} \
{11.53	-5	5	5	} \
{5.35	0	1	8	} \
{13.37	-1	1	8	} \
{9.28	-1	6	4	} \
{0.70	-5	6	4	} \
{1.61	-2	5	6	} \
{2.96	-3	5	6	} \
{8.49	-2	7	2	} \
{12.41	-5	7	2	} \
{13.09	0	6	3	} \
{5.95	-6	6	3	} \
{2.85	-2	4	7	} \
{9.05	-3	6	5	} \
{4.03	-3	7	3	} \
{8.91	-4	7	3	} \
{5.21	-1	2	8	} \
{11.42	-1	7	0	} \
{0.90	-1	5	6	} \
{13.85	-4	5	6	} \
{6.69	-1	4	7	} \
{11.07	-3	4	7	} \
{6.15	-2	6	5	} \
{6.25	-4	6	5	} \
{5.96	-1	7	1	} \
{4.69	-6	7	1	} \
{2.66	0	2	8	} \
{4.82	-2	2	8	} \
{1.80	-2	7	3	} \
{4.76	-5	7	3	} \
{12.80	-1	7	2	} \
{4.33	-6	7	2	} \
{0.96	0	6	4	} \
{9.03	-6	6	4	} \
{1.18	0	4	7	} \
{9.79	-4	4	7	} \
{1.40	-1	6	5	} \
{8.29	-5	6	5	} \
{8.28	-1	3	8	} \
{9.44	-2	3	8	} \
{4.05	-3	7	4	} \
{8.89	-4	7	4	} \
{2.70	0	5	6	} \
{1.02	-5	5	6	} \
{8.35	-4	8	0	} \
{5.30	-1	7	3	} \
{5.38	-6	7	3	} \
{3.31	-4	8	1	} \
{0.56	0	3	8	} \
{15.73	-3	3	8	} \
{5.43	-2	7	4	} \
{4.98	-5	7	4	} \
{7.43	-3	8	0	} \
{9.90	0	7	0	} \
{7.99	-3	6	6	} \
{4.08	-2	5	7	} \
{2.29	-3	5	7	} \
{1.87	-3	8	1	} \
{0.43	-5	8	1	} \
{11.72	0	7	1	} \
{3.21	-7	7	1	} \
{19.29	0	0	9	} \
{7.23	-2	6	6	} \
{9.35	-4	6	6	} \
{9.43	-4	8	2	} \
{6.13	0	1	9	} \
{2.67	-1	1	9	} \
{5.74	-1	5	7	} \
{4.93	-4	5	7	} \
{5.29	-3	8	2	} \
{7.90	-5	8	2	} \
{1.58	0	7	2	} \
{5.97	-7	7	2	} \
{9.95	0	6	5	} \
{2.85	-6	6	5	} \
{3.83	-2	4	8	} \
{4.43	-2	8	0	} \
{8.19	-3	7	5	} \
{3.43	-4	7	5	} \
{10.10	-2	8	1	} \
{6.49	-6	8	1	} \
{4.39	-1	4	8	} \
{7.28	-3	4	8	} \
{2.97	-1	7	4	} \
{8.05	-6	7	4	} \
{5.37	-1	2	9	} \
{10.51	-1	6	6	} \
{6.00	-5	6	6	} \
{7.82	-4	8	3	} \
{5.04	0	2	9	} \
{9.41	-2	2	9	} \
{8.95	-2	8	2	} \
{3.76	-6	8	2	} \
{1.92	-2	7	5	} \
{5.49	-5	7	5	} \
{6.46	-3	8	3	} \
{14.74	-5	8	3	} \
{3.44	0	7	3	} \
{3.23	-7	7	3	} \
{14.34	0	5	7	} \
{2.07	-5	5	7	} \
{13.22	0	4	8	} \
{2.21	-4	4	8	} \
{9.42	-1	8	0	} \
{2.05	-1	3	9	} \
{3.11	-2	3	9	} \
{0.84	-3	6	7	} \
{6.05	-2	8	3	} \
{8.03	-6	8	3	} \
{6.64	-1	8	1	} \
{5.36	-7	8	1	} \
{7.30	-4	8	4	} \
{2.29	0	6	6	} \
{10.90	-6	6	6	} \
{2.93	-2	6	7	} \
{8.50	-4	6	7	} \
{7.25	-1	7	5	} \
{3.18	-6	7	5	} \
{1.53	-2	5	8	} \
{7.06	-3	5	8	} \
{2.50	-3	8	4	} \
{5.95	-5	8	4	} \
{11.45	0	7	4	} \
{2.29	-7	7	4	} \
{1.65	0	3	9	} \
{5.89	-3	3	9	} \
{8.24	-3	7	6	} \
{3.14	-4	7	6	} \
{1.93	-1	8	2	} \
{3.15	-7	8	2	} \
{7.82	-1	5	8	} \
{4.57	-4	5	8	} \
{0.94	-4	9	0	} \
{4.36	-2	7	6	} \
{2.03	-5	7	6	} \
{1.39	-1	6	7	} \
{8.01	-5	6	7	} \
{9.07	-4	9	1	} \
{5.95	-5	9	1	} \
{1.77	-2	8	4	} \
{8.17	-6	8	4	} \
{8.57	-2	4	9	} \
{7.09	-1	8	3	} \
{6.94	-7	8	3	} \
{9.47	0	1	10	} \
{9.81	-1	1	10	} \
{6.58	-3	9	0	} \
{9.87	-1	4	9	} \
{9.12	-3	4	9	} \
{3.77	-4	9	2	} \
{8.28	-5	9	2	} \
{5.27	-4	8	5	} \
{0.29	-3	9	1	} \
{4.71	-6	9	1	} \
{5.46	0	8	0	} \
{4.48	-3	8	5	} \
{3.52	-5	8	5	} \
{3.33	0	7	5	} \
{12.16	-7	7	5	} \
{2.68	0	8	1	} \
{8.84	-8	8	1	} \
{2.02	-5	5	8	} \
{1.90	-1	2	10	} \
{5.73	-1	7	6	} \
{6.23	-6	7	6	} \
{7.50	-3	9	2	} \
{7.96	-6	9	2	} \
{1.39	0	2	10	} \
{4.66	-2	2	10	} \
{4.58	0	4	9	} \
{6.59	-4	4	9	} \
{9.51	0	6	7	} \
{2.41	-6	6	7	} \
{2.44	0	8	2	} \
{1.58	-8	8	2	} \
{4.25	-4	9	3	} \
{3.75	-5	9	3	} \
{6.35	-3	6	8	} \
{5.92	-1	8	4	} \
{7.71	-7	8	4	} \
{1.81	-2	9	0	} \
{5.58	-3	7	7	} \
{9.02	-4	7	7	} \
{7.13	-2	8	5	} \
{2.61	-6	8	5	} \
{9.09	-2	9	1	} \
{6.24	-7	9	1	} \
{2.09	-2	6	8	} \
{4.75	-4	6	8	} \
{5.21	-3	9	3	} \
{6.01	-6	9	3	} \
{6.47	-1	3	10	} \
{5.80	-2	3	10	} \
{7.51	-2	5	9	} \
{7.04	-3	5	9	} \
{10.82	-2	7	7	} \
{5.39	-5	7	7	} \
{3.43	-2	9	2	} \
{7.10	-7	9	2	} \
{3.66	-8	8	3	} \
{5.00	-4	8	6	} \
{10.91	-1	6	8	} \
{2.27	-5	6	8	} \
{4.62	-4	9	4	} \
{9.22	-5	9	4	} \
{9.28	0	3	10	} \
{2.34	-3	3	10	} \
{3.49	-1	5	9	} \
{2.38	-4	5	9	} \
{13.27	-3	8	6	} \
{3.18	-5	8	6	} \
{0.38	0	7	6	} \
{0.63	-7	7	6	} \
{7.52	-1	8	5	} \
{7.76	-7	8	5	} \
{8.66	-2	9	3	} \
{1.14	-7	9	3	} \
{6.91	-3	9	4	} \
{9.35	-6	9	4	} \
{8.19	-1	9	0	} \
{3.39	-1	7	7	} \
{10.50	-6	7	7	} \
{1.60	-1	9	1	} \
{8.60	-8	9	1	} \
{8.92	0	8	4	} \
{10.81	-8	8	4	} \
{6.63	-2	4	10	} \
{7.24	-2	8	6	} \
{4.27	-6	8	6	} \
{7.58	-1	4	10	} \
{2.70	-3	4	10	} \
{15.52	-5	10	0	} \
{1.10	0	5	9	} \
{0.48	-5	5	9	} \
{5.50	-1	9	2	} \
{8.28	-8	9	2	} \
{3.52	-5	10	1	} \
{6.39	0	6	8	} \
{4.42	-6	6	8	} \
{0.83	0	1	11	} \
{3.43	-1	1	11	} \
{3.70	-4	10	0	} \
{11.27	-4	9	5	} \
{4.46	-5	9	5	} \
{5.90	-4	10	1	} \
{10.62	-6	10	1	} \
{6.82	-3	7	8	} \
{8.99	-4	7	8	} \
{7.73	-2	9	4	} \
{3.26	-7	9	4	} \
{7.25	-3	6	9	} \
{1.36	-5	10	2	} \
{3.40	0	4	10	} \
{7.09	-4	4	10	} \
{8.99	-1	2	11	} \
{10.33	-2	6	9	} \
{7.77	-4	6	9	} \
{6.36	-4	8	7	} \
{5.98	-4	10	2	} \
{1.55	-6	10	2	} \
{7.78	-3	9	5	} \
{4.79	-6	9	5	} \
{4.12	-1	9	3	} \
{3.47	-8	9	3	} \
{4.17	-2	7	8	} \
{11.81	-5	7	8	} \
{8.41	0	2	11	} \
{1.79	-2	2	11	} \
{6.29	-3	10	0	} \
{6.49	-1	8	6	} \
{7.07	-7	8	6	} \
{7.77	-3	8	7	} \
{2.89	-5	8	7	} \
{3.04	0	7	7	} \
{1.78	-7	7	7	} \
{11.93	0	8	5	} \
{7.78	-8	8	5	} \
{3.43	-3	10	1	} \
{2.43	-7	10	1	} \
{2.52	-5	10	3	} \
{9.89	-2	5	10	} \
{1.39	-3	5	10	} \
{1.37	0	9	0	} \
{2.74	-1	6	9	} \
{4.22	-5	6	9	} \
{2.87	-3	10	2	} \
{6.56	-7	10	2	} \
{2.60	-4	10	3	} \
{3.90	-6	10	3	} \
{5.13	0	9	1	} \
{4.70	-9	9	1	} \
{7.25	-1	3	11	} \
{3.03	-2	3	11	} \
{4.50	-2	8	7	} \
{6.63	-6	8	7	} \
{2.87	-2	9	5	} \
{7.33	-7	9	5	} \
{3.85	-1	7	8	} \
{4.13	-6	7	8	} \
{5.20	-1	9	4	} \
{5.70	-8	9	4	} \
{1.98	-1	5	10	} \
{8.88	-4	5	10	} \
{2.89	-4	9	6	} \
{3.48	-5	9	6	} \
{5.64	-9	9	2	} \
{7.04	0	3	11	} \
{5.12	-3	3	11	} \
{4.68	-2	10	0	} \
{11.40	-3	10	3	} \
{5.51	-7	10	3	} \
{1.47	-2	10	1	} \
{9.67	-8	10	1	} \
{3.17	-5	10	4	} \
{5.31	-3	9	6	} \
{3.14	-6	9	6	} \
{7.73	-4	10	4	} \
{2.67	-6	10	4	} \
{3.17	0	6	9	} \
{0.52	-6	6	9	} \
{4.49	0	8	6	} \
{9.16	-2	10	2	} \
{5.66	-8	10	2	} \
{0.39	0	9	3	} \
{11.77	-9	9	3	} \
{1.88	0	5	10	} \
{1.96	-5	5	10	} \
{1.46	-2	4	11	} \
{0.33	-3	7	9	} \
{3.89	-4	7	9	} \
{4.12	-1	8	7	} \
{1.61	-7	8	7	} \
{2.03	-4	8	8	} \
{8.87	-1	4	11	} \
{6.54	-3	4	11	} \
{5.22	-1	9	5	} \
{3.10	-8	9	5	} \
{1.36	-3	8	8	} \
{3.46	-5	8	8	} \
{1.44	0	7	8	} \
{6.31	-7	7	8	} \
{4.19	-3	10	4	} \
{3.65	-7	10	4	} \
{8.04	-3	6	10	} \
{1.73	-2	7	9	} \
{1.09	-5	7	9	} \
{1.64	0	0	12	} \
{3.03	-2	9	6	} \
{8.08	-7	9	6	} \
{3.91	-2	10	3	} \
{2.68	-8	10	3	} \
{5.08	-2	6	10	} \
{1.11	-4	6	10	} \
{3.00	0	1	12	} \
{0.69	-1	1	12	} \
{2.68	-5	10	5	} \
{7.99	0	9	4	} \
{0.71	-9	9	4	} \
{0.92	-4	4	11	} \
{5.86	-5	11	0	} \
{5.43	-1	10	0	} \
{7.30	-4	9	7	} \
{5.58	-5	9	7	} \
{3.47	-4	10	5	} \
{9.17	-6	10	5	} \
{8.49	-5	11	1	} \
{6.13	-6	11	1	} \
{8.43	-1	10	1	} \
{3.57	-9	10	1	} \
{4.56	-2	8	8	} \
{8.64	-6	8	8	} \
{5.18	-1	2	12	} \
{0.83	-1	6	10	} \
{6.77	-5	6	10	} \
{2.77	-4	11	0	} \
{8.42	-1	7	9	} \
{7.58	-6	7	9	} \
{6.21	0	2	12	} \
{10.89	-2	2	12	} \
{5.17	-3	9	7	} \
{5.31	-6	9	7	} \
{1.20	-5	11	2	} \
{3.93	-6	11	2	} \
{2.00	-1	10	2	} \
{4.29	-9	10	2	} \
{4.96	-4	11	1	} \
{0.66	-7	11	1	} \
{3.27	-2	10	4	} \
{2.12	-8	10	4	} \
{2.17	-2	5	11	} \
{3.33	-3	5	11	} \
{1.74	0	8	7	} \
{3.34	-3	10	5	} \
{3.13	-7	10	5	} \
{4.17	-1	9	6	} \
{4.19	-8	9	6	} \
{6.93	-4	11	2	} \
{5.94	-7	11	2	} \
{3.30	-1	5	11	} \
{2.70	-4	5	11	} \
{5.21	-1	3	12	} \
{8.23	-2	3	12	} \
{1.75	0	9	5	} \
{7.61	-9	9	5	} \
{5.03	-5	11	3	} \
{5.07	-6	11	3	} \
{8.30	-1	10	3	} \
{6.01	-9	10	3	} \
{4.41	-1	8	8	} \
{3.74	-7	8	8	} \
{4.50	-3	11	0	} \
{4.60	-5	10	6	} \
{5.03	-2	9	7	} \
{4.98	-7	9	7	} \
{4.19	-3	11	1	} \
{7.77	-8	11	1	} \
{1.56	0	6	10	} \
{8.15	-6	6	10	} \
{6.86	-4	8	9	} \
{2.40	0	3	12	} \
{2.16	-3	3	12	} \
{4.60	-4	10	6	} \
{2.85	-6	10	6	} \
{3.83	-4	11	3	} \
{2.59	-7	11	3	} \
{5.21	-3	7	10	} \
{5.78	-4	7	10	} \
{1.53	-3	8	9	} \
{6.29	-5	8	9	} \
{8.28	0	7	9	} \
{8.38	-7	7	9	} \
{4.93	-3	11	2	} \
{6.32	-8	11	2	} \
{3.44	-2	10	5	} \
{2.15	-8	10	5	} \
{1.21	0	5	11	} \
{15.17	-5	5	11	} \
{1.77	0	10	0	} \
{0.96	0	10	1	} \
{0.63	-10	10	1	} \
{1.45	-4	9	8	} \
{7.35	-5	9	8	} \
{1.55	-5	11	4	} \
{5.89	-6	11	4	} \
{4.28	-1	10	4	} \
{3.23	-9	10	4	} \
{7.81	-2	7	10	} \
{5.83	-5	7	10	} \
{5.75	-2	4	12	} \
{3.93	-3	10	6	} \
{11.22	-7	10	6	} \
{3.35	-3	6	11	} \
{1.80	-2	8	9	} \
{4.95	-6	8	9	} \
{0.70	-1	4	12	} \
{1.91	-3	4	12	} \
{12.18	0	10	2	} \
{1.90	-10	10	2	} \
{7.48	-3	11	3	} \
{5.76	-8	11	3	} \
{4.73	-3	9	8	} \
{0.79	-6	9	8	} \
{10.77	-4	11	4	} \
{5.01	-7	11	4	} \
{8.19	-2	6	11	} \
{4.30	-4	6	11	} \
{7.34	-2	11	0	} \
{11.16	0	9	6	} \
{3.90	-9	9	6	} \
{6.28	-1	9	7	} \
{2.94	-8	9	7	} \
{3.34	-2	11	1	} \
{3.45	-9	11	1	} \
{4.13	0	8	8	} \
{4.87	-8	8	8	} \
{3.99	-1	7	10	} \
{2.84	-6	7	10	} \
{5.37	0	4	12	} \
{7.54	-4	4	12	} \
{2.76	-5	10	7	} \
{5.75	-2	11	2	} \
{10.00	-9	11	2	} \
{6.12	0	10	3	} \
{1.36	-10	10	3	} \
{0.83	0	1	13	} \
{4.97	-1	1	13	} \
{1.28	-1	6	11	} \
{3.30	-5	6	11	} \
{3.33	-2	10	6	} \
{4.92	-8	10	6	} \
{2.80	-4	10	7	} \
{5.50	-6	10	7	} \
{7.09	-5	11	5	} \
{2.34	-6	11	5	} \
{3.37	-1	10	5	} \
{3.62	-9	10	5	} \
{6.76	-2	9	8	} \
{6.67	-7	9	8	} \
{4.56	-3	11	4	} \
{0.59	-8	11	4	} \
{7.04	-1	8	9	} \
{6.15	-7	8	9	} \
{8.61	-1	2	13	} \
]]

#reference CaWO4 15586
set gui(refCaWO4) [list [list 5.243 5.243 11.376 90.0 90.0 90.0] [list \
{33313070.26	0	1	1	} \
{61061293.52	1	1	2	} \
{14396672.99	0	1	3	} \
{7966636.33	0	0	4	} \
{12310897.64	0	2	0	} \
{283206.17	0	2	2	} \
{2266908.83	1	2	1	} \
{8964947.33	-1	2	1	} \
{1154884.18	1	1	4	} \
{3001036.54	0	1	5	} \
{5064008.96	1	2	3	} \
{1672058.67	-1	2	3	} \
{21922455.98	0	2	4	} \
{9534933.59	2	2	0	} \
{7536.03 	2	2	2	} \
{2233836.23	0	3	1	} \
{12250240.37	1	1	6	} \
{3539809.62	1	2	5	} \
{2827340.56	-1	2	5	} \
{9050684.23	1	3	2	} \
{11637061.32	-1	3	2	} \
{1675007.27	0	3	3	} \
{8943927.91	2	2	4	} \
{1522844.97	0	1	7	} \
{650.44  	0	2	6	} \
{1229745.78	2	3	1	} \
{2828840.44	-2	3	1	} \
{19034.11	1	3	4	} \
{13518.44	-1	3	4	} \
{1562218.86	0	0	8	} \
{2269009.59	0	3	5	} \
{2385403.46	2	3	3	} \
{1386400.90	-2	3	3	} \
{1778697.40	1	2	7	} \
{1713863.97	-1	2	7	} \
{150059.79	1	1	8	} \
{29.39   	2	2	6	} \
{2978872.90	0	4	0	} \
{137465.79	0	4	2	} \
{1491860.89	1	4	1	} \
{950419.74	-1	4	1	} \
{5426742.74	0	2	8	} \
{6204876.66	1	3	6	} \
{4005713.73	-1	3	6	} \
{1266496.31	0	1	9	} \
{821342.28	2	3	5	} \
{572016.63	-2	3	5	} \
{4522321.10	3	3	2	} \
{941987.84	1	4	3	} \
{1439951.31	-1	4	3	} \
{4113354.88	0	4	4	} \
{1374670.93	0	3	7	} \
{2130492.41	2	4	0	} \
{2241496.88	-2	4	0	} \
{49203.28	2	4	2	} \
{18512.23	-2	4	2	} \
{7720.32 	3	3	4	} \
{3347580.90	2	2	8	} \
{821908.47	1	2	9	} \
{480253.46	-1	2	9	} \
{607175.89	1	4	5	} \
{629436.75	-1	4	5	} \
{3108856.72	1	1	10	} \
{2940848.18	2	4	4	} \
{2857001.43	-2	4	4	} \
{511814.62	2	3	7	} \
{440089.09	-2	3	7	} \
{6308.14 	1	3	8	} \
{4480.28 	-1	3	8	} \
{856.40  	0	4	6	} \
{684127.34	0	5	1	} \
{474214.00	3	4	1	} \
{739933.23	-3	4	1	} \
{5809.07 	0	2	10	} \
{2462237.62	3	3	6	} \
{447180.33	0	3	9	} \
{628265.86	0	1	11	} \
{2796296.89	1	5	2	} \
{2088223.14	-1	5	2	} \
{519093.02	0	5	3	} \
{492717.57	3	4	3	} \
{354156.13	-3	4	3	} \
{450549.81	1	4	7	} \
{420091.30	-1	4	7	} \
{350.54  	2	4	6	} \
{131.89  	-2	4	6	} \
{633726.25	2	5	1	} \
{325941.64	-2	5	1	} \
{364.18  	2	2	10	} \
{40.55   	1	5	4	} \
{1410.62 	-1	5	4	} \
{1993861.29	0	4	8	} \
{676986.64	2	3	9	} \
{487645.31	-2	3	9	} \
{434421.04	0	5	5	} \
{640151.62	3	4	5	} \
{545340.67	-3	4	5	} \
{645436.56	0	0	12	} \
{288674.25	1	2	11	} \
{528120.90	-1	2	11	} \
{354225.23	2	5	3	} \
{541265.70	-2	5	3	} \
{1590012.56	1	3	10	} \
{2022711.50	-1	3	10	} \
{3864.17 	3	3	8	} \
{659948.75	4	4	0	} \
{1326.72 	1	1	12	} \
{577.05  	4	4	2	} \
{1566056.47	2	4	8	} \
{1539004.84	-2	4	8	} \
{1127293.39	1	5	6	} \
{2053493.08	-1	5	6	} \
{360667.71	1	4	9	} \
{491733.48	-1	4	9	} \
{314335.89	2	5	5	} \
{416575.27	-2	5	5	} \
{1213794.24	0	2	12	} \
{287083.17	0	3	11	} \
{1388444.43	3	5	2	} \
{1548141.54	-3	5	2	} \
{1671062.66	4	4	4	} \
{332497.34	0	5	7	} \
{470040.43	3	4	7	} \
{431320.97	-3	4	7	} \
{689396.12	0	6	0	} \
{21926.66	0	6	2	} \
{320724.17	0	1	13	} \
{365181.26	1	6	1	} \
{238082.64	-1	6	1	} \
{16404.06	0	4	10	} \
{6351.95 	3	5	4	} \
{14011.32	-3	5	4	} \
{1363257.06	2	2	12	} \
{248547.71	2	3	11	} \
{426381.66	-2	3	11	} \
{223110.48	1	6	3	} \
{268582.68	-1	6	3	} \
{1237186.22	3	3	10	} \
{1204072.23	0	6	4	} \
{256597.72	2	5	7	} \
{300134.72	-2	5	7	} \
{26.27   	1	5	8	} \
{914.07   	-1	5	8	} \
{5.35    	4	4	6	} \
{563731.60	2	6	0	} \
{499048.25	-2	6	0	} \
{92.47   	1	3	12	} \
{65.67   	-1	3	12	} \
{10298.02	2	6	2	} \
{4317.18 	-2	6	2	} \
{178865.13	1	2	13	} \
{340719.52	-1	2	13	} \
{188524.04	4	5	1	} \
{288442.06	-4	5	1	} \
{7855.34 	2	4	10	} \
{2955.51 	-2	4	10	} \
{1240625.72	3	5	6	} \
{996274.83	-3	5	6	} \
{229636.37	0	5	9	} \
{199893.06	3	4	9	} \
{158843.83	-3	4	9	} \
{245851.34	1	6	5	} \
{322185.06	-1	6	5	} \
{291939.55	1	4	11	} \
{216557.19	-1	4	11	} \
{270180.96	4	5	3	} \
{224226.96	-4	5	3	} \
{1003827.58	2	6	4	} \
{1069639.85	-2	6	4	} \
{982527.94	1	1	14	} \
{215.31  	0	6	6	} \
{199848.28	0	3	13	} \
{180851.23	3	6	1	} \
{256757.15	-3	6	1	} \
{987758.32	4	4	8	} \
{2497.00 	0	2	14	} \
{174533.45	2	5	9	} \
{236314.78	-2	5	9	} \
{232721.08	4	5	5	} \
{178752.19	-4	5	5	} \
{887438.05	0	4	12	} \
{281668.50	3	6	3	} \
{210131.70	-3	6	3	} \
{1017542.40	1	5	10	} \
{704947.02	-1	5	10	} \
{205387.23	1	6	7	} \
{252303.85	-1	6	7	} \
{4905.24 	3	5	8	} \
{10819.97	-3	5	8	} \
{106.14  	2	6	6	} \
{44.50   	-2	6	6	} \
{79.11   	3	3	12	} \
{196127.47	0	1	15	} \
{131780.42	2	3	13	} \
{247415.50	-2	3	13	} \
{170166.95	0	7	1	} \
{770712.55	0	6	8	} \
{189.12  	2	2	14	} \
{131908.67	3	6	5	} \
{121492.92	-3	6	5	} \
{777389.94	2	4	12	} \
{810773.77	-2	4	12	} \
{181263.30	0	5	11	} \
{122499.41	3	4	11	} \
{182540.07	-3	4	11	} \
{660824.22	1	7	2	} \
{779792.34	-1	7	2	} \
{728478.34	5	5	2	} \
{220597.37	0	7	3	} \
{180013.13	4	5	7	} \
{147854.55	-4	5	7	} \
{667619.03	1	3	14	} \
{737303.75	-1	3	14	} \
{422892.14	4	6	0	} \
{462413.20	-4	6	0	} \
{186364.73	1	2	15	} \
{99878.27	-1	2	15	} \
{36.77   	4	6	2	} \
{2.87    	-4	6	2	} \
{184443.01	1	4	13	} \
{123067.37	-1	4	13	} \
{104943.70	2	7	1	} \
{192822.76	-2	7	1	} \
{165.67  	4	4	10	} \
{1453.86 	1	7	4	} \
{82.15   	-1	7	4	} \
{11242.82	5	5	4	} \
{662854.82	2	6	8	} \
{692272.61	-2	6	8	} \
{117133.32	1	6	9	} \
{129226.42	-1	6	9	} \
{109762.28	0	7	5	} \
{124253.63	0	0	16	} \
{184676.32	2	5	11	} \
{100305.18	-2	5	11	} \
{138160.83	2	7	3	} \
{83908.41	-2	7	3	} \
{558272.76	3	5	10	} \
{647649.91	-3	5	10	} \
{546549.46	4	6	4	} \
{514143.82	-4	6	4	} \
{99927.14	3	6	7	} \
{101133.09	-3	6	7	} \
{5084.85 	1	1	16	} \
{23.49   	-1	5	12	} \
{117465.67	0	3	15	} \
{7179.19 	0	6	10	} \
{11331.69	0	4	14	} \
{690328.04	1	7	6	} \
{486162.61	-1	7	6	} \
{567813.70	5	5	6	} \
{139580.14	4	5	9	} \
{124625.68	-4	5	9	} \
{182345.25	2	7	5	} \
{148813.57	-2	7	5	} \
{643937.83	0	2	16	} \
{555734.51	3	7	2	} \
{552266.51	-3	7	2	} \
{86336.56	0	7	7	} \
{538889.68	3	3	14	} \
{170225.86	2	3	15	} \
{100948.96	-2	3	15	} \
{125703.78	0	5	13	} \
{95663.52	3	4	13	} \
{144102.33	-3	4	13	} \
{141902.91	5	6	1	} \
{103572.80	-5	6	1	} \
{3759.41 	2	6	10	} \
{1576.03 	-2	6	10	} \
{25.82   	3	7	4	} \
{2923.33 	-3	7	4	} \
{6038.26 	2	4	14	} \
{2271.84 	-2	4	14	} \
{162350.71	3	6	9	} \
{125838.62	-3	6	9	} \
{450025.23	2	2	16	} \
{89838.28	0	1	17	} \
{366211.10	4	4	12	} \
{124934.89	1	6	11	} \
{78532.49	-1	6	11	} \
{79301.55	5	6	3	} \
{125344.89	-5	6	3	} \
{149707.07	2	7	7	} \
{135928.64	-2	7	7	} \
{1373.76 	1	7	8	} \
{77.62   	-1	7	8	} \
{10623.42	5	5	8	} \
{279976.15	0	8	0	} \
{462.34  	1	3	16	} \
{328.35  	-1	3	16	} \
{147.36  	3	5	12	} \
{325.07  	-3	5	12	} \
{91212.16	1	4	15	} \
{137164.87	-1	4	15	} \
{968.04  	0	8	2	} \
{133012.11	2	5	13	} \
{67772.50	-2	5	13	} \
{71151.52	1	8	1	} \
{145069.58	-1	8	1	} \
{141238.15	4	7	1	} \
{97978.18	-4	7	1	} \
{405194.32	4	6	8	} \
{388698.44	-4	6	8	} \
{421401.50	3	7	6	} \
{427317.39	-3	7	6	} \
{133653.10	0	7	9	} \
{97789.77	5	6	5	} \
{90496.21	-5	6	5	} \
{130980.14	1	2	17	} \
{98647.78	-1	2	17	} \
{417312.35	0	6	12	} \
{69772.38	4	5	11	} \
{110231.07	-4	5	11	} \
{124977.03	1	8	3	} \
{89766.02	-1	8	3	} \
{95670.05	4	7	3	} \
{122469.86	-4	7	3	} \
{369993.71	0	8	4	} \
{452410.39	1	5	14	} \
{382337.57	-1	5	14	} \
{168746.81	2	8	0	} \
{201838.38	-2	8	0	} \
{192.66  	2	8	2	} \
{199.65  	-2	8	2	} \
{75360.40	2	7	9	} \
{49141.88	-2	7	9	} \
{89634.88	1	8	5	} \
{53121.39	-1	8	5	} \
{51294.01	4	7	5	} \
{64406.59	-4	7	5	} \
{373901.97	0	4	16	} \
{115377.53	0	3	17	} \
{369977.25	2	6	12	} \
{325494.52	-2	6	12	} \
{78543.71	3	6	11	} \
{109175.08	-3	6	11	} \
{373525.23	1	1	18	} \
{322966.81	1	7	10	} \
{412231.39	-1	7	10	} \
{373303.35	5	5	10	} \
{411086.50	2	8	4	} \
{374237.78	-2	8	4	} \
{89379.02	5	6	7	} \
{75119.63	-5	6	7	} \
{25.86   	3	7	8	} \
{2928.55 	-3	7	8	} \
{11.70   	0	8	6	} \
{136465.70	6	6	0	} \
{475.54  	3	3	16	} \
{73041.56	0	5	15	} \
{76527.10	3	4	15	} \
{51357.51	-3	4	15	} \
{120.49  	0	2	18	} \
{281.23  	6	6	2	} \
{98147.64	1	6	13	} \
{63593.20	-1	6	13	} \
{98117.83	3	8	1	} \
{48690.08	-3	8	1	} \
{16.88   	4	6	10	} \
{1.32    	-4	6	10	} \
{159.55  	4	4	14	} \
{327381.91	2	4	16	} \
{315776.54	-2	4	16	} \
{67515.54	2	3	17	} \
{42342.72	-2	3	17	} \
{77826.06	0	7	11	} \
{363028.35	5	7	2	} \
{327991.23	-5	7	2	} \
{42131.31	3	8	3	} \
{81854.83	-3	8	3	} \
{386868.37	6	6	4	} \
{72190.28	1	8	7	} \
{48811.84	-1	8	7	} \
{46449.19	4	7	7	} \
{53113.54	-4	7	7	} \
{316236.93	3	5	14	} \
{338764.14	-3	5	14	} \
{2.36    	2	8	6	} \
{2.45    	-2	8	6	} \
{54233.04	2	5	15	} \
{94715.60	-2	5	15	} \
{9.96    	2	2	18	} \
{51300.65	4	5	13	} \
{81450.72	-4	5	13	} \
{1714.84 	5	7	4	} \
{3924.52 	-5	7	4	} \
{290405.29	0	8	8	} \
{7295.55 	0	6	14	} \
{55100.15	0	1	19	} \
{51171.66	5	6	9	} \
{80899.25	-5	6	9	} \
{85924.04	3	8	5	} \
{98390.07	-3	8	5	} \
{52874.77	1	4	17	} \
{60928.37	-1	4	17	} \
{41908.33	2	7	11	} \
{81523.24	-2	7	11	} \
{374683.49	1	3	18	} \
{257707.65	-1	3	18	} \
{311126.69	3	7	10	} \
{308247.51	-3	7	10	} \
{3.49    	6	6	6	} \
{148652.89	4	8	0	} \
{125409.23	-4	8	0	} \
{4.63    	1	5	16	} \
{161.20  	-1	5	16	} \
{49.92   	1	7	12	} \
{2.82    	-1	7	12	} \
{386.02  	5	5	12	} \
{1767.72 	4	8	2	} \
{2103.07 	-4	8	2	} \
{48825.73	3	6	13	} \
{76372.36	-3	6	13	} \
{71440.40	0	9	1	} \
{307442.63	2	8	8	} \
{287644.01	-2	8	8	} \
{4002.44 	2	6	14	} \
{1677.91 	-2	6	14	} \
{242789.22	5	7	6	} \
{305377.45	-5	7	6	} \
{73980.04	1	2	19	} \
{82218.64	-1	2	19	} \
{80734.56	1	8	9	} \
{65472.81	-1	8	9	} \
{69842.72	4	7	9	} \
{84436.83	-4	7	9	} \
{345873.01	4	6	12	} \
{381297.70	-4	6	12	} \
{281787.59	1	9	2	} \
{285454.16	-1	9	2	} \
{44591.38	0	9	3	} \
{274339.17	4	8	4	} \
{300328.67	-4	8	4	} \
{82549.43	3	8	7	} \
{82999.07	-3	8	7	} \
{43806.09	1	6	15	} \
{59833.41	-1	6	15	} \
{685.31  	0	4	18	} \
{51060.39	0	7	13	} \
{61995.65	0	0	20	} \
{77894.60	2	9	1	} \
{41292.74	-2	9	1	} \
{57765.42	6	7	1	} \
{37315.08	-6	7	1	} \
{513.00  	0	8	10	} \
{5136.94 	1	9	4	} \
{2279.51 	-1	9	4	} \
{290306.63	6	6	8	} \
{80831.36	0	3	19	} \
{66273.39	0	9	5	} \
{313741.60	4	4	16	} \
{53202.55	0	5	17	} \
{83659.73	3	4	17	} \
{64857.26	-3	4	17	} \
{69118.54	5	6	11	} \
{52347.47	-5	6	11	} \
{240791.71	3	3	18	} \
{52128.64	2	9	3	} \
{85644.93	-2	9	3	} \
{38625.63	6	7	3	} \
{57861.02	-6	7	3	} \
{5641.63 	1	1	20	} \
{1860.11 	5	7	8	} \
{4256.92 	-5	7	8	} \
{22.47   	4	8	6	} \
{26.74   	-4	8	6	} \
{1117.93 	3	5	16	} \
{2466.00 	-3	5	16	} \
{1.00    	3	7	12	} \
{113.38  	-3	7	12	} \
{66939.80	4	5	15	} \
{49391.31	-4	5	15	} \
{386.45  	2	4	18	} \
{145.40  	-2	4	18	} \
{37612.45	2	7	13	} \
{76383.42	-2	7	13	} \
{253776.77	0	2	20	} \
{38890.09	5	8	1	} \
{73550.86	-5	8	1	} \
{105.98  	2	8	10	} \
{109.83  	-2	8	10	} \
{232467.87	1	9	6	} \
{225777.01	-1	9	6	} \
{33965.86	2	3	19	} \
{35070.41	-2	3	19	} \
{27778.72	3	8	9	} \
{51732.07	-3	8	9	} \
{37834.15	2	9	5	} \
{45684.02	-2	9	5	} \
{71666.76	6	7	5	} \
{76020.55	-6	7	5	} \
{240500.29	0	6	16	} \
{41525.05	2	5	17	} \
{66000.75	-2	5	17	} \
{36894.35	1	8	11	} \
{81180.80	-1	8	11	} \
{79704.05	4	7	11	} \
{54528.24	-4	7	11	} \
{249099.06	3	9	2	} \
{205675.16	-3	9	2	} \
{72215.58	5	8	3	} \
{32386.08	-5	8	3	} \
{62541.65	0	9	7	} \
{215514.52	1	7	14	} \
{241721.42	-1	7	14	} \
{230498.74	5	5	14	} \
{74444.92	3	6	15	} \
{50007.65	-3	6	15	} \
{219843.72	2	2	20	} \
{160.08  	6	6	10	} \
{1584.31 	3	9	4	} \
{221828.26	4	8	8	} \
{236511.80	-4	8	8	} \
{20.11   	4	6	14	} \
{1.57    	-4	6	14	} \
{41638.33	1	4	19	} \
{34143.32	-1	4	19	} \
{45862.13	5	8	5	} \
{48776.84	-5	8	5	} \
{223361.91	2	6	16	} \
{246080.49	-2	6	16	} \
{270152.19	0	8	12	} \
{58378.83	0	1	21	} \
{146265.59	1	5	18	} \
{286769.91	-1	5	18	} \
{578.96  	1	3	20	} \
{411.21  	-1	3	20	} \
{238937.00	5	7	10	} \
{205290.67	-5	7	10	} \
{35891.08	2	9	7	} \
{37047.48	-2	9	7	} \
{67628.65	6	7	7	} \
{66380.03	-6	7	7	} \
{5745.24 	1	9	8	} \
{2549.42 	-1	9	8	} \
{62285.68	0	7	15	} \
{61487.80	5	6	13	} \
{39725.70	-5	6	13	} \
{28833.25	4	9	1	} \
{44938.66	-4	9	1	} \
{178539.79	3	9	6	} \
{266246.54	-3	9	6	} \
{31551.39	0	9	9	} \
{43269.73	1	6	17	} \
{64683.45	-1	6	17	} \
{163080.65	2	8	12	} \
{199737.77	-2	8	12	} \
{43290.78	1	2	21	} \
{27780.45	-1	2	21	} \
{51632.50	3	8	11	} \
{24528.05	-3	8	11	} \
{189156.94	7	7	2	} \
{51687.33	4	9	3	} \
{33298.10	-4	9	3	} \
{38389.27	5	8	7	} \
{48778.88	-5	8	7	} \
{201849.02	3	7	14	} \
{200958.18	-3	7	14	} \
{65803.68	0	10	0	} \
{107164.23	6	8	0	} \
{109757.24	-6	8	0	} \
{46134.27	2	7	15	} \
{22171.11	-2	7	15	} \
{11.74   	4	4	18	} \
{29.21   	0	10	2	} \
{3678.54 	6	8	2	} \
{347.72  	-6	8	2	} \
{27459.40	1	8	13	} \
{62955.37	-1	8	13	} \
{60359.93	4	7	13	} \
{38661.97	-4	7	13	} \
{193734.28	0	4	20	} \
{41646.38	1	10	1	} \
{37305.63	-1	10	1	} \
{1070.08 	4	8	10	} \
{1273.11 	-4	8	10	} \
{488.78  	7	7	4	} \
{42320.40	0	5	19	} \
{61367.42	3	4	19	} \
{60345.19	-3	4	19	} \
{42024.11	2	9	9	} \
{64739.92	-2	9	9	} \
{26585.62	6	7	9	} \
{39189.18	-6	7	9	} \
{55395.97	4	9	5	} \
{54490.55	-4	9	5	} \
{52890.48	4	5	17	} \
{35184.14	-4	5	17	} \
{136405.66	6	6	12	} \
{28430.64	0	3	21	} \
{225202.55	3	5	18	} \
{173567.73	-3	5	18	} \
{40690.93	1	10	3	} \
{32111.55	-1	10	3	} \
{658.30  	3	3	20	} \
{192006.99	1	9	10	} \
{195749.36	-1	9	10	} \
{228965.21	0	10	4	} \
{179081.64	6	8	4	} \
{176488.88	-6	8	4	} \
{1821.77 	3	9	8	} \
{128719.36	2	10	0	} \
{108123.22	-2	10	0	} \
{440.96  	1	7	16	} \
{24.91   	-1	7	16	} \
{3409.94 	5	5	16	} \
{79.69   	5	7	12	} \
{182.37  	-5	7	12	} \
{185460.38	1	1	22	} \
{558.93  	0	6	18	} \
{87.13   	2	10	2	} \
{2136.62 	-2	10	2	} \
{180896.77	2	4	20	} \
{179118.72	-2	4	20	} \
{668.09  	0	8	14	} \
{207624.42	7	7	6	} \
{39076.65	2	5	19	} \
{40588.42	-2	5	19	} \
{55220.99	5	8	9	} \
{25268.16	-5	8	9	} \
{41013.43	1	10	5	} \
{56084.39	-1	10	5	} \
{148010.25	4	6	16	} \
{133562.33	-4	6	16	} \
{31518.66	3	6	17	} \
{25126.31	-3	6	17	} \
{62329.63	2	3	21	} \
{48015.78	-2	3	21	} \
{41750.08	0	9	11	} \
{329.14  	0	2	22	} \
{148633.89	5	9	2	} \
{204897.82	-5	9	2	} \
{143177.27	2	10	4	} \
{161468.54	-2	10	4	} \
{48557.77	4	9	7	} \
{52167.47	-4	9	7	} \
{49.01   	6	8	6	} \
{4.63    	-6	8	6	} \
{25364.83	5	6	15	} \
{45858.09	-5	6	15	} \
{318.57  	2	6	18	} \
{133.55  	-2	6	18	} \
{53790.11	3	8	13	} \
{22842.98	-3	8	13	} \
{44178.38	3	10	1	} \
{43706.17	-3	10	1	} \
{2.73    	5	9	4	} \
{102.94  	-5	9	4	} \
{141.84  	2	8	14	} \
{146.98  	-2	8	14	} \
{27845.21	0	7	17	} \
{169593.06	4	8	12	} \
{139973.93	-4	8	12	} \
{39451.87	1	4	21	} \
{54217.33	-1	4	21	} \
{52486.21	2	9	11	} \
{28045.81	-2	9	11	} \
{33478.69	6	7	11	} \
{21191.73	-6	7	11	} \
{28.57   	2	2	22	} \
{46631.31	3	10	3	} \
{42257.17	-3	10	3	} \
{7.00    	1	5	20	} \
{243.72  	-1	5	20	} \
{184456.54	3	9	10	} \
{138125.52	-3	9	10	} \
{38327.60	1	10	7	} \
{53359.95	-1	10	7	} \
{576.85  	7	7	8	} \
{1.17    	2	10	6	} \
{28.70   	-2	10	6	} \
{9.43    	3	7	16	} \
{1068.07 	-3	7	16	} \
{257.26  	1	9	12	} \
{114.16  	-1	9	12	} \
{52451.05	1	8	15	} \
{29874.75	-1	8	15	} \
{32413.45	4	7	15	} \
{47533.41	-4	7	15	} \
{132702.56	1	3	22	} \
{192015.50	-1	3	22	} \
{52705.32	7	8	1	} \
{25189.34	-7	8	1	} \
{42682.23	0	1	23	} \
{188262.07	0	10	8	} \
{158163.82	6	8	8	} \
{156567.93	-6	8	8	} \
{219.94  	6	6	14	} \
{230973.44	5	9	6	} \
{115986.31	-5	9	6	} \
{41492.66	1	6	19	} \
{49297.30	-1	6	19	} \
{38614.56	4	9	9	} \
{25113.17	-4	9	9	} \
{21775.39	3	10	5	} \
{25320.05	-3	10	5	} \
{58001.14	2	7	17	} \
{39434.05	-2	7	17	} \
{26766.71	5	8	11	} \
{47843.18	-5	8	11	} \
{33731.14	7	8	3	} \
{61291.96	-7	8	3	} \
{167785.71	5	7	14	} \
{156137.26	-5	7	14	} \
{69747.79	4	10	0	} \
{79868.52	-4	10	0	} \
{2626.20 	4	10	2	} \
{5407.82 	-4	10	2	} \
{41807.16	0	9	13	} \
{166680.36	4	4	20	} \
{33637.49	6	9	1	} \
{53117.68	-6	9	1	} \
{19665.11	1	2	23	} \
{39632.39	-1	2	23	} \
{135079.90	2	10	8	} \
{146662.23	-2	10	8	} \
{36565.54	4	5	19	} \
{31204.93	-4	5	19	} \
{33178.90	1	10	9	} \
{24079.83	-1	10	9	} \
{20822.94	7	8	5	} \
{25383.99	-7	8	5	} \
{127640.13	0	8	16	} \
{32431.25	0	5	21	} \
{23612.27	3	4	21	} \
{19128.29	-3	4	21	} \
{2155.23 	0	4	22	} \
{196116.97	1	7	18	} \
{126735.67	-1	7	18	} \
{154122.97	5	5	18	} \
{38916.51	6	9	3	} \
{32183.46	-6	9	3	} \
{1832.45 	3	5	20	} \
{4041.99 	-3	5	20	} \
{139348.27	7	7	10	} \
{164648.08	4	10	4	} \
{153029.81	-4	10	4	} \
{20150.15	3	10	7	} \
{23874.59	-3	10	7	} \
{3.30    	5	9	8	} \
{124.54  	-5	9	8	} \
{85.07   	3	9	12	} \
{16517.13	3	8	15	} \
{41140.20	-3	8	15	} \
{159364.90	3	3	22	} \
{1.78    	4	6	18	} \
{45118.60	2	9	13	} \
{20066.29	-2	9	13	} \
{36378.21	6	7	13	} \
{21272.32	-6	7	13	} \
{151933.38	0	6	20	} \
{23569.79	0	11	1	} \
{20.19   	0	10	10	} \
{2542.92 	6	8	10	} \
{240.37  	-6	8	10	} \
{23055.43	0	3	23	} \
{1546.47 	4	8	14	} \
{1839.84 	-4	8	14	} \
{18910.72	3	6	19	} \
{22140.89	-3	6	19	} \
{28955.80	6	9	5	} \
{18386.82	-6	9	5	} \
{53705.80	0	0	24	} \
{175342.87	2	8	16	} \
{151098.63	-2	8	16	} \
{30823.28	5	6	17	} \
{31607.26	-5	6	17	} \
{28944.94	2	5	21	} \
{37418.95	-2	5	21	} \
{19293.52	4	9	11	} \
{29837.59	-4	9	11	} \
{1269.40 	2	4	22	} \
{477.60  	-2	4	22	} \
{145523.71	1	11	2	} \
{141052.20	-1	11	2	} \
{33152.20	0	11	3	} \
{21139.05	7	8	7	} \
{20913.94	-7	8	7	} \
{149119.83	1	9	14	} \
{150486.56	-1	9	14	} \
{36.15   	4	10	6	} \
{74.44   	-4	10	6	} \
{763.99  	1	1	24	} \
{20802.83	5	8	13	} \
{48723.28	-5	8	13	} \
{146934.15	2	6	20	} \
{151038.34	-2	6	20	} \
{25746.87	2	11	1	} \
{49858.05	-2	11	1	} \
{26875.46	5	10	1	} \
{29699.64	-5	10	1	} \
{61.72   	2	10	10	} \
{1513.61 	-2	10	10	} \
{29977.02	2	3	23	} \
{56231.46	-2	3	23	} \
{3924.32 	1	11	4	} \
{1769.47 	-1	11	4	} \
{19022.36	0	7	19	} \
{43365.20	3	10	9	} \
{38628.60	-3	10	9	} \
{43547.97	0	11	5	} \
{108730.99	0	2	24	} \
{182418.66	6	6	16	} \
{36929.47	1	8	17	} \
{15761.50	-1	8	17	} \
{15339.35	4	7	17	} \
{23568.28	-4	7	17	} \
{30733.60	1	10	11	} \
{25023.58	-1	10	11	} \
{136852.86	3	7	18	} \
{139268.76	-3	7	18	} \
{46472.43	2	11	3	} \
{25959.32	-2	11	3	} \
{29165.91	5	10	3	} \
{40406.14	-5	10	3	} \
{108869.38	5	9	10	} \
{175976.69	-5	9	10	} \
{27183.76	6	9	7	} \
{19030.43	-6	9	7	} \
{80047.60	8	8	0	} \
{844.31  	5	7	16	} \
{1932.27 	-5	7	16	} \
{28.04   	7	7	12	} \
{21658.57	0	9	15	} \
{194551.03	1	5	22	} \
{104264.77	-1	5	22	} \
{872.17  	8	8	2	} \
{42144.75	1	4	23	} \
{30481.61	-1	4	23	} \
{148433.88	4	10	8	} \
{141001.41	-4	10	8	} \
{147786.82	1	11	6	} \
{157568.74	-1	11	6	} \
{46300.43	2	7	19	} \
{47243.76	-2	7	19	} \
{32891.96	7	8	9	} \
{55138.83	-7	8	9	} \
{25328.53	2	11	5	} \
{20543.90	-2	11	5	} \
{40046.09	5	10	5	} \
{25738.78	-5	10	5	} \
{159238.57	2	2	24	} \
{88718.54	0	10	12	} \
{153248.39	6	8	12	} \
{157348.78	-6	8	12	} \
{23598.59	1	6	21	} \
{23636.24	-1	6	21	} \
{133612.31	3	11	2	} \
{166291.47	-3	11	2	} \
{166349.74	7	9	2	} \
{134717.98	-7	9	2	} \
{130556.46	8	8	4	} \
{40972.06	0	11	7	} \
{145779.06	3	9	14	} \
{127592.92	-3	9	14	} \
{85.98   	1	3	24	} \
{61.06   	-1	3	24	} \
{25708.87	2	9	15	} \
{50883.33	-2	9	15	} \
{21029.59	6	7	15	} \
{35565.79	-6	7	15	} \
{65.22   	0	8	18	} \
{18540.01	4	9	13	} \
{32516.33	-4	9	13	} \
{1235.05 	3	11	4	} \
{19.22   	-3	11	4	} \
{68.54   	7	9	4	} \
{548.99  	-7	9	4	} \
{29736.59	0	1	25	} \
{35613.46	6	9	9	} \
{32561.37	-6	9	9	} \
{137436.09	4	8	16	} \
{158495.80	-4	8	16	} \
{36022.25	3	8	17	} \
{49795.37	-3	8	17	} \
{196396.21	2	10	12	} \
{162298.14	-2	10	12	} \
{32401.90	4	5	21	} \
{31162.29	-4	5	21	} \
{38936.68	3	10	11	} \
{37447.54	-3	10	11	} \
{43.67   	4	4	22	} \
{838.65  	1	7	20	} \
{47.39   	-1	7	20	} \
{6485.34 	5	5	20	} \
{22562.30	2	11	7	} \
{21972.64	-2	11	7	} \
{38855.76	5	10	7	} \
{23912.59	-5	10	7	} \
{4974.78 	1	11	8	} \
{2243.13 	-1	11	8	} \
{12.28   	8	8	6	} \
{67595.71	6	10	0	} \
{76789.81	-6	10	0	} \
{2880.07 	1	9	16	} \
{1278.04 	-1	9	16	} \
{6.29    	-5	9	12	} \
{45635.09	5	8	15	} \
{16393.84	-5	8	15	} \
{113552.66	3	5	22	} \
{147113.55	-3	5	22	} \
{14.29   	2	8	18	} \
{14.81   	-2	8	18	} \
{5378.03 	6	10	2	} \
{2575.12 	-6	10	2	} \
{29593.81	1	10	13	} \
{28439.27	-1	10	13	} \
{129106.25	4	6	20	} \
{125814.34	-4	6	20	} \
{41874.97	4	11	1	} \
{27985.28	-4	11	1	} \
{1996.53 	4	10	10	} \
{4111.18 	-4	10	10	} \
{33275.67	0	5	23	} \
{17357.34	3	4	23	} \
{30483.24	-3	4	23	} \
{149811.89	3	11	6	} \
{88098.77	-3	11	6	} \
{88008.22	7	9	6	} \
{147327.27	-7	9	6	} \
{35822.28	5	6	19	} \
{25369.00	-5	6	19	} \
{18570.04	1	2	25	} \
{47123.97	-1	2	25	} \
{28026.00	0	11	9	} \
{140194.19	0	4	24	} \
{50157.94	3	6	21	} \
{38722.13	-3	6	21	} \
{46877.96	7	8	11	} \
{23475.06	-7	8	11	} \
{2161.94 	0	6	22	} \
{14933.86	4	11	3	} \
{26778.39	-4	11	3	} \
{135363.32	6	10	4	} \
{125534.50	-6	10	4	} \
{128633.88	7	7	14	} \
{106.76   	3	3	24	} \
{22.84   	6	6	18	} \
{41184.64	2	5	23	} \
{18321.11	-2	5	23	} \
{127631.39	8	8	8	} \
{32.82   	0	10	14	} \
{4133.17 	6	8	14	} \
{390.69  	-6	8	14	} \
{25926.76	1	8	19	} \
{19010.01	-1	8	19	} \
{17477.74	4	7	19	} \
{18186.51	-4	7	19	} \
{29755.83	0	3	25	} \
{44222.08	2	11	9	} \
{26973.02	-2	11	9	} \
{25642.37	5	10	9	} \
{38699.21	-5	10	9	} \
{35220.15	4	11	5	} \
{35385.00	-4	11	5	} \
{143869.43	2	4	24	} \
{152198.59	-2	4	24	} \
{33744.91	0	9	17	} \
{46481.05	0	7	21	} \
{29949.04	6	9	11	} \
{49265.46	-6	9	11	} \
{1280.91 	2	6	22	} \
{536.99  	-2	6	22	} \
{108847.53	5	7	18	} \
{144707.92	-5	7	18	} \
{19.23   	3	7	20	} \
{2178.29  	-3	7	20	} \
{129115.99	1	11	10	} \
{123254.12	-1	11	10	} \
{1600.71  	3	11	8	} \
{24.91   	-3	11	8	} \
{88.83   	7	9	8	} \
{711.51  	-7	9	8	} \
{76.86   	6	10	6	} \
{36.81   	-6	10	6	} \
{85646.79	0	12	0	} \
{1004.29 	3	9	16	} \
{38538.65	4	9	15	} \
{22340.70	-4	9	15	} \
{313.76  	0	12	2	} \
{32091.16	3	10	13	} \
{32691.66	-3	10	13	} \
{44883.56	1	12	1	} \
{20467.09	-1	12	1	} \
{44406.06	8	9	1	} \
{17569.20	-8	9	1	} \
{132810.07	1	1	26	} \
{102.58  	2	10	14	} \
{2515.61  	-2	10	14	} \
{16139.19	2	3	25	} \
{42685.92	-2	3	25	} \
{18670.07	2	9	17	} \
{28580.36	-2	9	17	} \
{41257.25	6	7	17	} \
{48473.18	-6	7	17	} \
{114742.93	4	10	12	} \
{133206.82	-4	10	12	} \
{21513.52	2	7	21	} \
{13943.14	-2	7	21	} \
{19403.44	0	11	11	} \
{155234.74	5	11	2	} \
{107270.39	-5	11	2	} \
{19686.11	1	12	3	} \
{52557.74	-1	12	3	} \
{17820.54	8	9	3	} \
{28609.57	-8	9	3	} \
{112976.93	0	12	4	} \
{38936.79	4	11	7	} \
{35446.84	-4	11	7	} \
{874.71  	0	2	26	} \
{116977.40	5	9	14	} \
{145838.59	-5	9	14	} \
{50484.02	2	12	0	} \
{64272.64	-2	12	0	} \
{1.24    	1	5	24	} \
{43.01   	-1	5	24	} \
{29157.54	1	10	15	} \
{23894.85	-1	10	15	} \
{170.58  	4	8	18	} \
{202.94  	-4	8	18	} \
{508.56  	2	12	2	} \
{843.74  	-2	12	2	} \
{42913.98	7	8	13	} \
{16815.31	-7	8	13	} \
{125647.12	0	8	20	} \
{32168.51	7	10	1	} \
{31623.45	-7	10	1	} \
{708.94  	8	8	10	} \
{34222.25	1	6	23	} \
{17296.28	-1	6	23	} \
{42.17   	5	11	4	} \
{14.73   	-5	11	4	} \
{132699.15	6	10	8	} \
{125955.64	-6	10	8	} \
{47461.68	3	8	19	} \
{40497.73	-3	8	19	} \
{37082.37	1	4	25	} \
{19194.96	-1	4	25	} \
{24962.30	1	12	5	} \
{21372.72	-1	12	5	} \
{27610.31	8	9	5	} \
{47909.53	-8	9	5	} \
{30822.77	5	8	17	} \
{26749.21	-5	8	17	} \
{25572.58	2	11	11	} \
{47990.70	-2	11	11	} \
{23193.45	5	10	11	} \
{28894.45	-5	10	11	} \
{127298.03	1	9	18	} \
{122811.25	-1	9	18	} \
{20028.09	7	10	3	} \
{16956.31	-7	10	3	} \
{123174.59	3	11	10	} \
{169176.56	-3	11	10	} \
{169260.51	7	9	10	} \
{124692.18	-7	9	10	} \
{151811.73	2	12	4	} \
{134383.03	-2	12	4	} \
{79.45   	2	2	26	} \
{4.55    	0	12	6	} \
{348.53  	7	7	16	} \
{270.55  	1	11	12	} \
{121.99  	-1	11	12	} \
{102643.54	1	7	22	} \
{156607.17	-1	7	22	} \
{132491.02	5	5	22	} \
{27778.82	6	9	13	} \
{45241.96	-6	9	13	} \
{138447.55	2	8	20	} \
{132780.99	-2	8	20	} \
{14292.68	3	12	1	} \
{41412.02	-3	12	1	} \
{19335.48	4	5	23	} \
{36450.65	-4	5	23	} \
{129541.26	1	3	26	} \
{134636.99	-1	3	26	} \
{89273.50	5	11	6	} \
{196080.21	-5	11	6	} \
{14719.80	4	11	9	} \
{25581.37	-4	11	9	} \
{37705.36	7	10	5	} \
{42998.50	-7	10	5	} \
{90023.92	4	4	24	} \
{179489.11	0	10	16	} \
{123215.85	6	8	16	} \
{120397.98	-6	8	16	} \
{21002.45	5	6	21	} \
{36416.24	-5	6	21	} \
{8.01    	4	6	22	} \
{31232.66	3	12	3	} \
{15827.86	-3	12	3	} \
{27926.77	1	12	7	} \
{18467.07	-1	12	7	} \
{31020.55	8	9	7	} \
{46645.45	-8	9	7	} \
{7.43    	2	12	6	} \
{12.32   	-2	12	6	} \
{31833.35	0	1	27	} \
{351.11  	3	5	24	} \
{774.52  	-3	5	24	} \
{35899.44	3	10	15	} \
{32618.21	-3	10	15	} \
{21579.29	0	11	13	} \
{142160.05	6	6	20	} \
{33367.48	6	11	1	} \
{18239.46	-6	11	1	} \
{4565.29 	6	10	10	} \
{2185.99 	-6	10	10	} \
{30883.02	3	6	23	} \
{44494.50	-3	6	23	} \
{119526.60	0	12	8	} \
{3542.01 	4	10	14	} \
{7293.65 	-4	10	14	} \
{40693.87	0	9	19	} \
{34094.18	0	5	25	} \
{25674.00	3	4	25	} \
{44795.41	-3	4	25	} \
{52264.66	3	12	5	} \
{34021.61	-3	12	5	} \
{129537.27	0	6	24	} \
{95075.63	2	10	16	} \
{115610.56	-2	10	16	} \
{44537.95	4	9	17	} \
{39472.15	-4	9	17	} \
{151234.35	8	8	12	} \
{39538.88	1	8	21	} \
{36584.56	-1	8	21	} \
{39480.44	4	7	21	} \
{45594.76	-4	7	21	} \
{112177.58	3	9	18	} \
{181448.01	-3	9	18	} \
{38679.26	6	11	3	} \
{45461.15	-6	11	3	} \
{1967.60 	5	7	20	} \
{4502.88 	-5	7	20	} \
{40210.91	7	10	7	} \
{46305.39	-7	10	7	} \
{6555.26 	0	4	26	} \
{57.07   	5	11	8	} \
{19.93   	-5	11	8	} \
{43445.92	1	2	27	} \
{15304.30	-1	2	27	} \
{64436.54	4	12	0	} \
{59399.00	-4	12	0	} \
{2.18    	5	9	16	} \
{82.26   	-5	9	16	} \
{90.23   	3	11	12	} \
{1.40    	-3	11	12	} \
{5.01    	7	9	12	} \
{40.11   	-7	9	12	} \
{25420.47	7	8	15	} \
{55861.93	-7	8	15	} \
{140778.26	3	7	22	} \
{138591.07	-3	7	22	} \
{286.13  	4	12	2	} \
{3835.24 	-4	12	2	} \
{21544.20	2	11	13	} \
{47939.78	-2	11	13	} \
{26287.23	5	10	13	} \
{26109.08	-5	10	13	} \
{35193.51	0	7	23	} \
{135496.23	3	3	26	} \
{148460.24	2	12	8	} \
{136284.16	-2	12	8	} \
{23308.90	2	9	19	} \
{19481.02	-2	9	19	} \
{48814.86	6	7	19	} \
{43321.61	-6	7	19	} \
{44665.99	2	5	25	} \
{16877.60	-2	5	25	} \
{21868.65	1	12	9	} \
{55280.74	-1	12	9	} \
{19458.23	8	9	9	} \
{25913.37	-8	9	9	} \
{19468.69	6	11	5	} \
{31403.63	-6	11	5	} \
{130357.82	2	6	24	} \
{109299.42	-2	6	24	} \
{31975.43	1	10	17	} \
{45114.30	-1	10	17	} \
{39636.99	4	11	11	} \
{27191.53	-4	11	11	} \
{126559.04	9	9	2	} \
{138691.59	4	12	4	} \
{144818.42	-4	12	4	} \
{50525.85	3	12	7	} \
{38464.94	-3	12	7	} \
{4035.52 	2	4	26	} \
{1518.33 	-2	4	26	} \
{133856.96	1	11	14	} \
{131064.08	-1	11	14	} \
{28363.96	0	3	27	} \
]]

#reference C Diamond ICSD 76766
set gui(refC) [list [list 3.566990 3.566990 3.566990 90.0 90.0 90.0] [list \
{100.00000  1   1   1  } \
{ 43.93671  0   2   2  } \
{ 24.56270  1   1   3  } \
{  0.00000  2   2   2  } \
{  6.47943  0   0   4  } \
{  9.71846  1   3   3  } \
{ 13.04352  2   2   4  } \
{  1.76771  3   3   3  } \
{  5.30312  1   1   5  } \
{  3.91079  0   4   4  } \
{  6.65276  1   3   5  } \
{  0.00000  2   4   4  } \
{  5.24332  0   2   6  } \
{  2.31451  3   3   5  } \
{  0.00000  2   2   6  } \
{  1.29125  4   4   4  } \
{  1.77115  1   5   5  } \
{  1.77115  1   1   7  } \
{  6.27924  2   4   6  } \
{  1.48466  3   5   5  } \
{  2.96932  1   3   7  } \
{  0.69485  0   0   8  } \
{  1.35677  3   3   7  } \
{  0.00000  4   4   6  } \
{  1.33758  0   6   6  } \
{  2.67515  2   2   8  } \
{  0.44901  5   5   5  } \
{  2.69407  1   5   7  } \
{  0.00000  2   6   6  } \
{  2.80295  0   4   8  } \
]]

#reference LaB6 ICSD 152466 for hkl and intensities
#I l k h
#lattice parameters from SRM660c certificate
set gui(refLaB6) [list [list 4.156826 4.156826 4.156826 90.0 90.0 90.0] [list \
{ 59.98765   0 0   1 } \
{100.00000   0 1   1 } \
{ 43.58605   1 1   1 } \
{ 22.55373   0 0   2 } \
{ 51.32992   0 1   2 } \
{ 27.03046   1 1   2 } \
{ 10.32051   0 2   2 } \
{ 27.84417   1 2   2 } \
{  2.38029   0 0   3 } \
{ 21.53968   0 1   3 } \
{ 12.96268   1 1   3 } \
{  2.10369   2 2   2 } \
{  7.83121   0 2   3 } \
{ 16.07588   1 2   3 } \
{  2.61470   0 0   4 } \
{  6.92403   2 2   3 } \
{  4.59875   0 1   4 } \
{  4.41373   0 3   3 } \
{  4.76925   1 1   4 } \
{  3.28727   1 3   3 } \
{  4.61423   0 2   4 } \
{  8.96036   1 2   4 } \
{  4.05018   2 3   3 } \
{  1.90964   2 2   4 } \
{  1.34170   0 3   4 } \
{  0.47414   0 0   5 } \
{  5.47813   1 3   4 } \
{  2.08362   0 1   5 } \
{  0.32273   3 3   3 } \
{  3.01832   1 1   5 } \
{  3.19201   2 3   4 } \
{  2.11414   0 2   5 } \
{  1.65176   1 2   5 } \
{  0.99176   0 4   4 } \
{  1.16036   1 4   4 } \
{  2.28631   2 2   5 } \
{  1.84319   3 3   4 } \
{  1.42744   0 3   5 } \
{  2.44149   1 3   5 } \
{  0.93103   2 4   4 } \
{  0.43652   0 0   6 } \
{  0.67669   0 1   6 } \
{  0.79115   1 1   6 } \
{  1.27521   2 3   5 } \
{  0.86861   0 2   6 } \
{  0.64302   0 4   5 } \
{  0.44704   3 4   4 } \
{  1.73094   1 2   6 } \
{  0.94933   1 4   5 } \
{  0.50522   3 3   5 } \
{  0.38253   2 2   6 } \
{  1.62609   2 4   5 } \
{  0.25152   0 3   6 } \
{  1.29417   1 3   6 } \
{  0.19310   4 4   4 } \
{  0.03601   0 0   7 } \
{  0.76650   2 3   6 } \
{  0.83678   3 4   5 } \
{  0.14561   0 5   5 } \
{  0.60736   0 1   7 } \
{  0.36533   1 1   7 } \
{  0.70426   1 5   5 } \
{  0.56895   0 4   6 } \
{  0.62412   1 4   6 } \
{  0.24793   0 2   7 } \
{  0.58907   1 2   7 } \
{  0.56064   3 3   6 } \
{  0.10502   2 5   5 } \
{  0.56067   2 4   6 } \
{  0.36016   2 2   7 } \
{  0.32146   4 4   5 } \
{  0.53832   0 3   7 } \
{  0.36297   3 5   5 } \
{  0.32478   1 3   7 } \
{  0.27703   3 4   6 } \
{  0.20988   0 5   6 } \
{  0.31986   1 5   6 } \
{  0.57417   2 3   7 } \
{  0.07325   0 0   8 } \
{  0.61029   2 5   6 } \
{  0.20850   0 1   8 } \
{  0.08718   0 4   7 } \
{  0.48308   1 4   7 } \
{  0.09894   4 5   5 } \
{  0.11039   1 1   8 } \
{  0.06674   3 3   7 } \
{  0.23473   4 4   6 } \
{  0.14162   0 2   8 } \
{  0.31116   2 4   7 } \
{  0.59882   1 2   8 } \
{  0.34693   3 5   6 } \
{  0.12645   0 6   6 } \
{  0.05389   2 2   8 } \
{  0.13068   1 6   6 } \
{  0.10338   0 3   8 } \
{  0.50193   3 4   7 } \
{  0.25636   1 3   8 } \
{  0.18467   0 5   7 } \
{  0.10609   5 5   5 } \
{  0.33111   1 5   7 } \
{  0.12967   2 6   6 } \
{  0.29678   4 5   6 } \
{  0.34112   2 3   8 } \
{  0.17374   2 5   7 } \
{  0.14021   0 4   8 } \
{  0.06433   3 6   6 } \
{  0.06863   4 4   7 } \
{  0.31047   1 4   8 } \
{  0.01435   0 0   9 } \
{  0.14874   3 3   8 } \
{  0.13204   0 1   9 } \
{  0.17859   3 5   7 } \
{  0.14908   1 1   9 } \
{  0.12716   2 4   8 } \
{  0.04195   0 6   7 } \
{  0.10880   0 2   9 } \
{  0.27222   1 6   7 } \
{  0.05220   5 5   6 } \
{  0.11943   1 2   9 } \
{  0.13713   4 6   6 } \
{  0.17693   3 4   8 } \
{  0.12902   0 5   8 } \
{  0.17347   2 6   7 } \
{  0.17380   2 2   9 } \
{  0.19666   4 5   7 } \
{  0.07309   1 5   8 } \
{  0.15693   0 3   9 } \
{  0.17191   1 3   9 } \
{  0.39688   2 5   8 } \
{  0.32734   3 6   7 } \
{  0.16309   2 3   9 } \
{  0.07851   4 4   8 } \
{  0.09553   5 6   6 } \
{  0.05625   0 4   9 } \
{  0.09148   0 7   7 } \
{  0.11139   3 5   8 } \
{  0.15098   1 4   9 } \
{  0.12456   5 5   7 } \
{  0.04910   1 7   7 } \
{  0.04630   3 3   9 } \
{  0.09818   0 6   8 } \
{  0.04977   0 0  10 } \
{  0.21472   1 6   8 } \
{  0.08842   4 6   7 } \
{  0.21243   2 4   9 } \
{  0.03846   0 1  10 } \
{  0.09171   1 1  10 } \
{  0.10493   2 7   7 } \
{  0.09036   2 6   8 } \
{  0.11817   0 2  10 } \
{  0.26077   4 5   8 } \
{  0.16320   1 2  10 } \
{  0.20862   3 4   9 } \
{  0.07006   0 5   9 } \
{  0.02338   3 7   7 } \
{  0.25994   1 5   9 } \
{  0.03643   6 6   6 } \
{  0.05989   2 2  10 } \
{  0.13394   3 6   8 } \
{  0.01676   0 3  10 } \
{  0.15908   5 6   7 } \
{  0.25189   1 3  10 } \
{  0.05601   2 5   9 } \
]]


#convert hkl+lattice-constants -> d-values
proc hkl2dvalue {a b c alpha beta gamma h k l} {
  set piby180 [expr {acos(0.0)/90.0}]
  set s11 [expr {pow($b,2)*pow($c,2)*pow(sin($alpha*$piby180),2)}]
  set s22 [expr {pow($a,2)*pow($c,2)*pow(sin($beta*$piby180),2)}]
  set s33 [expr {pow($a,2)*pow($b,2)*pow(sin($gamma*$piby180),2)}]
  set s12 [expr {$a*$b*pow($c,2)*(cos($alpha*$piby180)*cos($beta*$piby180)-cos($gamma*$piby180))}]
  set s23 [expr {$c*$b*pow($a,2)*(cos($beta*$piby180)*cos($gamma*$piby180)-cos($alpha*$piby180))}]
  set s13 [expr {$a*$c*pow($b,2)*(cos($gamma*$piby180)*cos($alpha*$piby180)-cos($beta*$piby180))}]
  set v [expr {$a*$b*$c*sqrt(1.0-pow(cos($alpha*$piby180),2)-pow(cos($beta*$piby180),2)-pow(cos($gamma*$piby180),2)+2.0*cos($alpha*$piby180)*cos($beta*$piby180)*cos($gamma*$piby180))}]
  set dsqrtinv [expr {($s11*pow($h,2)+$s22*pow($k,2)+$s33*pow($l,2)+2.0*$s12*$h*$k+2.0*$s23*$k*$l+2.0*$s13*$h*$l)/pow($v,2)}]
  return [expr {sqrt(1.0/$dsqrtinv)}]
}

#ansatz sort 2nd derivative to flatten curve, sort data and take
#specific percentage around 0
proc detnoisedata {data} {
  set last [lindex $data 0]
  foreach x $data {
    lappend difdata [expr {$x-$last}]
    set last $x
  }
  set difdata [lreplace $difdata 0 0]
  set last [lindex $difdata 0]
  foreach x $difdata {
    lappend difdifdata [expr {$x-$last}]
    set last $x
  }
  set difdifdata [lreplace $difdifdata 0 0]
  set np [llength $difdifdata]
  set sorted [lsort -real $difdifdata]
  set upper [lindex $sorted [expr {int($np/2*(1.0+0.1))}]]
  set lower [lindex $sorted [expr {int($np/2*(1.0-0.1))}]]
  return [expr {($upper - $lower)*2.0*sqrt(2)/sqrt(3)}]
}


proc zerostochannel {channel {itimes 1}}  {
  for {set i 0} {$i < $itimes} {incr i} {
    puts -nonewline $channel [binary format b 0]
  }
}


#ansatz sort 2nd derivative to flatten curve, sort data and take
#specific percentage around 0
proc detavg {data} {
  set np [llength $data]
  set sum 0.0
  foreach x $data {
    set sum [expr {$x+$sum}]
  }
  return [expr {$sum/$np}]
}


proc savediff {graphnumber} {
  global gui
  set output1 "#noise: $gui(noise$graphnumber)\n#averaged over $gui(yspread$graphnumber) points\n#avg int. $gui(avg$graphnumber)\n"
  append output1 "#number of data points [llength $gui(ydata$graphnumber)]\n"
  if {$gui(scaleAerror) > 0} {
    append output1 "#\n# details of linear regression used for 2theta scale calibration\n"
    append output1 "# 2theta = A+B*x_gel\n"
    append output1 "# A = $gui(scaleA)\n"
    append output1 "# B = $gui(scaleB)\n"
    append output1 "# stderror of A = $gui(scaleAerror)\n"
    append output1 "# stderror of B = $gui(scaleBerror)\n"
    append output1 "# stddevy = $gui(stddevy)\n"
    append output1 "# R = $gui(correlationcoefficient)\n"
    append output1 "# number of points in linear regression = $gui(numpoints)\n"
    append output1 "# \n"
  }
  set output2 ""
  set minint 9999999999999999
  set maxint -9999999999999999
  set thetabegin [lindex $gui(xdata1$graphnumber) 0]
  set thetaend [lindex $gui(xdata1$graphnumber) end]
  set thetastep [expr {[lindex $gui(xdata1$graphnumber) 1]-[lindex $gui(xdata1$graphnumber) 0]}]
  set numberofpoints [llength $gui(ydata$graphnumber)]
  foreach x $gui(xdata1$graphnumber) y $gui(ydata$graphnumber) ystdev $gui(ydatastdev$graphnumber) {
    append output1 "$x $y $ystdev\n"
    append output2 "$x $y \n"
    if {$minint > $y} {
      set minint $y
    }
    if {$maxint < $y} {
      set maxint $y
    }
  }
  set types {
    {{GNUPLOT Files}       {.dat}        }
    {{XY Files}       {.xy}        }
    {{STOE RAW files}       {.raw}        }
    {{All Files}        *             }
  }
  set filename [tk_getSaveFile -filetypes $types -initialdir [file dirname $gui(filename)] -initialfile "[file root [lindex [file split $gui(filename)] end]]-$graphnumber"]
  if {$filename != "" && [file extension $filename] == ".xy"} {
    string2file $output2 $filename
  } elseif {$filename != "" && [file extension $filename] == ".dat"} {
    string2file $output1 $filename
  } elseif {$filename != "" && [file extension $filename] == ".raw"} {
    file delete -force  $filename
    set channel [open $filename a+]
    fconfigure $channel -blocking 0 -translation binary
    set fileformat "RAW_1.06RAWDAT"
    puts -nonewline $channel [binary format A* $fileformat]
    zerostochannel $channel 2
    set timepoint [clock seconds]
#    set createdtime "02-Jan-14 15:25"
    set createdtime [clock format $timepoint -format {%d-%b-%y %H:%M}]
    puts -nonewline $channel [binary format A* $createdtime]
    zerostochannel $channel 1
    set title "powder sample"
    puts -nonewline $channel [binary format A* [format %-79s $title]]
    zerostochannel $channel 1
    set comment "X-ray powder camera  Huber G621, image plate reader Typhoon7000, IPreader-$gui(version)"
    puts -nonewline $channel [binary format A* [format %-79s $comment]]
    zerostochannel $channel 115
    set unknown 1000
    puts -nonewline $channel [binary format s* $unknown]
#monochromator
#1:Secondary
#2:Curved Germanium (111)
#3:Curved Graphite (002)
#4:Curved Quartz (101)
#5:??
#6:2x Ge(111)
#7:2x Ge(220)
#8:2x GeAs(400)
#10:Unknown
    set monochromator 2
    puts -nonewline $channel [binary format c* $monochromator]
    zerostochannel $channel 1
#XRAY-tube
#1:Ag
#2:Mo
#3:Cu
#4:Co
#5:Fe
#6:Cr
#7:nix
#8:DYC
#9:
#10:C
#11:YC
#12:YC
#13:
    if {$gui(radiation)== "AgKalpha1"} {
      set radiationelement 1
    } elseif {$gui(radiation)== "MoKalpha1"} {
      set radiationelement 2
    } elseif {$gui(radiation)== "CuKalpha1"} {
      set radiationelement 3
    } elseif {$gui(radiation)== "CoKalpha1"} {
      set radiationelement 4
    } elseif {$gui(radiation)== "FeKalpha1"} {
      set radiationelement 5
    } elseif {$gui(radiation)== "CrKalpha1"} {
      set radiationelement 6
    } else {
      set radiationelement 7
    }
    puts -nonewline $channel [binary format c* $radiationelement]
    zerostochannel $channel 1
#1: scintillation counter
#2: curved PSD
#3: linear PSD
#4: unknown
#5: Transmission
#6: Reflection
#7: Debye-Scherrer
#8: unknown
    set detector 2
    puts -nonewline $channel [binary format c* $detector]
    zerostochannel $channel 5
    set generatorvoltage 50
    puts -nonewline $channel [binary format c* $generatorvoltage]
    zerostochannel $channel 1
    set generatorcurrent 35
    puts -nonewline $channel [binary format c* $generatorcurrent]
    zerostochannel $channel 1
    set radiation1 $gui(wavelength)
    puts -nonewline $channel [binary format r* $radiation1]
    set radiation2 1.79285
    puts -nonewline $channel [binary format r* $radiation2]
    zerostochannel $channel 28
#1:Transmission
#2:Reflection
#3:Debye-Scherrer
#4:Unknown
#5:2Theta
#6:Omega
#7:2Theta:Omega
#8:Independent
    set scanmode 1
    puts -nonewline $channel [binary format c* $scanmode]
    zerostochannel $channel 1
#1:2Theta
#2:crash
#3:2Theta:Omega
#4:Independent
    set scantype 1
    puts -nonewline $channel [binary format c* $scantype]
    zerostochannel $channel 17
#number of ranges?
    set unknown 1
    puts -nonewline $channel [binary format c* $unknown]
    zerostochannel $channel 51
    set timepoint [clock  seconds]
    set modifiedtime [clock format $timepoint -format {%d-%b-%y %H:%M}]
    puts -nonewline $channel [binary format A* $modifiedtime]
    zerostochannel $channel 1
    set unknown "RAWDAT"
    puts -nonewline $channel [binary format A* $unknown]
    zerostochannel $channel 14
    puts -nonewline $channel [binary format s* $numberofpoints]
    zerostochannel $channel 2
#1
    set unknown 1
    puts -nonewline $channel [binary format c* $unknown]
    zerostochannel $channel 3
#26
    set unknown 26
    puts -nonewline $channel [binary format c* $unknown]
    zerostochannel $channel 1
#26
    set unknown 26
    puts -nonewline $channel [binary format c* $unknown]
    zerostochannel $channel 3
#4
    set unknown 4
    puts -nonewline $channel [binary format c* $unknown]
    zerostochannel $channel 15
    puts -nonewline $channel [binary format c* $generatorcurrent]
    zerostochannel $channel 1039
#data collection
    set starttime "unknown"
    puts -nonewline $channel [binary format A* [format %-15s $starttime]]
    zerostochannel $channel 1
    set endtime "unknown"
    puts -nonewline $channel [binary format A* [format %-15s $endtime]]
    zerostochannel $channel 3
    puts -nonewline $channel [binary format s* $numberofpoints]
    zerostochannel $channel 2
    set unknown 1
    puts -nonewline $channel [binary format c* $unknown]
    zerostochannel $channel 3
    set unknown 16256
    puts -nonewline $channel [binary format s* $unknown]
    puts -nonewline $channel [binary format r* $thetabegin]
    set omegabegin 3.5
    puts -nonewline $channel [binary format r* $omegabegin]
    puts -nonewline $channel [binary format r* $thetaend]
    zerostochannel $channel 4
    puts -nonewline $channel [binary format r* $thetastep]
    set omegastep 0.0077
    puts -nonewline $channel [binary format r* $omegastep]
    set timeperstep 0.0
    puts -nonewline $channel [binary format r* $timeperstep]
    zerostochannel $channel 12
    set unknown 293.15
    puts -nonewline $channel [binary format r* $unknown]
    zerostochannel $channel 32
#    puts -nonewline $channel [binary format s* [expr {int((32768-1)*$minint)}]]
    set scale [expr {pow(2.0,$gui(bit))-1.0}]
    puts -nonewline $channel [binary format s* [expr {int($minint/$scale*(32768-1))}]]
    zerostochannel $channel 2
#    puts -nonewline $channel [binary format s* [expr {int((32768-1)*$maxint)}]]
    puts -nonewline $channel [binary format s* [expr {int($maxint/$scale*(32768-1))}]]
    zerostochannel $channel 386
    foreach y $gui(ydata$graphnumber) {
#      puts -nonewline $channel [binary format s* [expr {int((32768-1)*$y)}]]
      puts -nonewline $channel [binary format s* [expr {int($y/$scale*(32768-1))}]]
    }
    zerostochannel $channel 484
    eof   $channel
    close $channel
  }
}


#apply an savitzky golay filter over (avgpoints*2+1)
#and returns the filtered ydata
proc savitzkygolay {xdata ydata {avgpoints 2}} {
#avgpoints means: avgpoints to the left and avgpoints to the right are considered = 2 avgpoints + 1 in total
#  currently avgpoints may be  {2 3 4 5 6 7 8 9 10 11 12}
  set xdataextended $xdata
  set ydataextended $ydata
  set yresult ""
  for {set i 0} {$i < $avgpoints} {incr i} {
    set xdataextended [linsert $xdataextended 0 [lindex $xdata 0]]
    set ydataextended [linsert $ydataextended 0 [lindex $ydata 0]]
    lappend xdataextended [lindex $xdata end]
    lappend ydataextended [lindex $ydata end]
  }
  set norm  [list 35 21 231 429 143 1.105 323 2.261 3.059 805 5.175]
  set clist [list \
            [list 17 12 -3]\
            [list 7 6 3 -2]\
            [list 59 54 39 14 -21]\
            [list 89 84 69 44 9 -36]\
            [list 25 24 21 16 9 0 -11]\
            [list 167 162 147 122 87 42 -13 -78]\
            [list 43 42 39 34 27 18 7 -6 -21]\
            [list 269 264 249 224 189 144 89 24 -51 -136]\
            [list 329 324 309 284 249 204 149 84 9 -76 -171]\
            [list 79 78 75 70 63 54 43 30 15 -2 -21 -42]\
            [list 467 462 447 422 387 343 287 222 147 62 -33 -138 -253]\
           ]
  set convcoeff [lindex $clist [expr {$avgpoints-2}]]
  for {set i $avgpoints} {$i < [expr {[llength $xdataextended]-$avgpoints}]} {incr i} {
    set sum 0.0
    for {set j [expr {int(-1.0*$avgpoints)}]} {$j <= $avgpoints} {incr j} {
      set sum [expr {$sum+[lindex $convcoeff [expr {abs($j)}]]*[lindex $ydataextended [expr {$i-$j}]]}]
    }
    lappend yresult [expr {$sum/[lindex $norm [expr {$avgpoints-2}]]}]
  }
  return $yresult
}


proc takeboxselection {graphnumber} {
  global gui
  set xordered [lsort -integer [list $gui(x1s) $gui(x2s)]]
  set yordered [lsort -integer [list $gui(y1s) $gui(y2s)]]
  set ixmin [expr {[lindex $xordered 0]*$gui(subsamplew)}]
  set ixmax [expr {[lindex $xordered 1]*$gui(subsamplew)}]
  set iymin [expr {[lindex $yordered 0]*$gui(subsampleh)}]
  set iymax [expr {[lindex $yordered 1]*$gui(subsampleh)}]
  if {$graphnumber} {
#bottom
   set gui(yspread1) [expr {$iymax-$iymin}]
   set gui(xdata01) ""
   set gui(ydata1) ""
  } else {
#top
   set gui(yspread0) [expr {$iymax-$iymin}]
   set gui(xdata00) ""
   set gui(ydata0) ""
  }
#read data from image
  if {[file extension $gui(filename)] == ".gel"} {
#gel file format uses a sqrt compression
#see operation instruction Typhoon FLA7000 scanner
    set gui(bit) 16
    set gui(maxyvalue) 65535.0
    set scale [expr {pow(2.0,$gui(bit))-1.0}]
    set y_sigma [split [string trim [readtiff $gui(filename) $ixmin $ixmax $iymin $iymax 0]]]
    set meanylist ""
    set stdevylist ""
    set np [llength $y_sigma]
    for {set i 0} {$i < $np} {incr i} {
      set mean [expr {$gui(maxyvalue)*[lindex $y_sigma $i]}]
      lappend meanylist $mean
      incr i
      set stdev [expr {$gui(maxyvalue)*[lindex $y_sigma $i]}]
      lappend stdevylist $stdev
    }
    set gui(ydata$graphnumber) $meanylist
    set gui(ydatastdev$graphnumber) $stdevylist
    set x 0.0
    set gui(noise$graphnumber) [detnoisedata $gui(ydata$graphnumber)]
    set gui(avg$graphnumber) [detavg $gui(ydata$graphnumber)]
    foreach y $gui(ydata$graphnumber) {
      set x [expr {$x+500.0*$gui(picres)}]
      lappend gui(xdata0$graphnumber) $x
    }
  } elseif {[file extension $gui(filename)] == ".tif" || [file extension $gui(filename)] == ".tiff"} {
#tif file format uses a linear scale
    set gui(maxyvalue) 65535.0
    set gui(bit) 16
    set scale [expr {pow(2.0,$gui(bit))-1.0}]
    set y_sigma [split [string trim [readtiff $gui(filename) $ixmin $ixmax $iymin $iymax 1]]]
    set meanylist ""
    set stdevylist ""
    set np [llength $y_sigma]
    for {set i 0} {$i < $np} {incr i} {
      set mean [expr {$gui(maxyvalue)*[lindex $y_sigma $i]}]
      lappend meanylist $mean
      incr i
      set stdev [expr {$gui(maxyvalue)*[lindex $y_sigma $i]}]
      lappend stdevylist $stdev
    }
    set gui(ydata$graphnumber) $meanylist
    set gui(ydatastdev$graphnumber) $stdevylist
    set x 0.0
    set gui(noise$graphnumber) [detnoisedata $gui(ydata$graphnumber)]
    set gui(avg$graphnumber) [detavg $gui(ydata$graphnumber)]
    foreach y $gui(ydata$graphnumber) {
      set x [expr {$x+500.0*$gui(picres)}]
      lappend gui(xdata0$graphnumber) $x
    }
  } else {
#all other file formats
    set gui(bit) 8
    set gui(maxyvalue) 256.0
    set scale [expr {pow(2.0,$gui(bit))-1.0}]
    for {set i $ixmin} {$i <= $ixmax} {incr i} {
      set sum 0.0
      for {set j $iymin} {$j <= $iymax} {incr j} {
        set sum [expr {$sum+[lindex [$gui(pic) get $i $j] 0]}]
      }
      set average [expr {$sum/double(1.0+abs($iymin-$iymax))}]
      set sumsqdifference 0.0
      for {set j $iymin} {$j <= $iymax} {incr j} {
        set sumsqdifference [expr {$sumsqdifference+pow([lindex [$gui(pic) get $i $j] 0]-$average,2)}]
      }
      lappend gui(xdata0$graphnumber) [expr {double($i-$ixmin)*$gui(picres)*500.0}]
      lappend gui(ydata$graphnumber) [expr {$scale-$average}]
      lappend gui(ydatastdev$graphnumber) [expr {sqrt($sumsqdifference)/double(1.0+abs($iymin-$iymax))}]
    }
    set gui(avg$graphnumber) [detavg $gui(ydata$graphnumber)]
    set gui(noise$graphnumber) [detnoisedata $gui(ydata$graphnumber)]
  }
  set gui(ydatamax$graphnumber) -1.0E99
  set gui(ydatamin$graphnumber) 1.0E99
  foreach z $gui(ydata$graphnumber) {
    if {$z > $gui(ydatamax$graphnumber)} {
      set gui(ydatamax$graphnumber) $z
    } elseif {$z < $gui(ydatamin$graphnumber)} {
      set gui(ydatamin$graphnumber) $z
    }
  }
  if {$gui(ydatamax$graphnumber) > [expr $gui(maxyvalue)*0.97]} {
    set xfilereply [tk_messageBox -message "You try to extract a trace from the diffractogram with saturated points. This will most likely cause subsequent errors. Reduce the exposure time." \
        -type ok]
  }
#   now available: gui(xdata0$graphnumber) gui(ydata$graphnumber) gui(ydatastdev$graphnumber)
#   not yet available: maxxdata0 maxydata
#                      gui(xdata0$graphnumber)
#apply savitzky golay filter to suppress noise
#interpolate with spline function
  set avgpoints 8
  set ydata [savitzkygolay $gui(xdata0$graphnumber) $gui(ydata$graphnumber) $avgpoints]
  set noise [expr {$gui(noise$graphnumber)*sqrt(3.0*(3.0*$avgpoints*$avgpoints-7.0)/(4.0*$avgpoints*($avgpoints*$avgpoints-4.0)))}]
#pick peaks
  set gui(pickedpeaks$graphnumber) [peakpick $gui(xdata0$graphnumber) $gui(ydata$graphnumber) $noise]
#flip graph if scanned wrong way round:
# take intensity values of a point at the end and another one at the beginning and compare their intensities
# position: half-way before the firstpeak and half-way after the last peak
  if {[llength $gui(pickedpeaks$graphnumber)] > 1} {
    set firstpeak [lindex $gui(pickedpeaks$graphnumber) 0]
    set lastpeak [lindex $gui(pickedpeaks$graphnumber) end]
    set numberofpoints [llength $gui(ydata$graphnumber)]
    set indexfirstpeak 0
    set indexlastpeak 0
    for {set i 0} {$i < $numberofpoints} {incr i} {
      if {[lindex $gui(xdata0$graphnumber) $i] <  [lindex $firstpeak 0]} {
        set indexfirstpeak $i
      }
      if {[lindex $gui(xdata0$graphnumber) $i] <  [lindex $lastpeak 0]} {
        set indexlastpeak $i
      }
    }
  #if 2theta scale is inverted change the order of the points
    if {[lindex $gui(ydata$graphnumber) [expr {int($indexfirstpeak/2)}]] < [lindex $gui(ydata$graphnumber) [expr {int($numberofpoints-($numberofpoints-$indexlastpeak)/2)}]]} {
      set ytemp ""
      for {set i 1} {$i <= [llength $gui(xdata0$graphnumber)]} {incr i} {
        lappend ytemp [lindex $gui(ydata$graphnumber) [expr {[llength $gui(ydata$graphnumber)]-$i}]]
      }
      set gui(ydata$graphnumber) $ytemp
      set gui(pickedpeaks$graphnumber) [peakpick $gui(xdata0$graphnumber) $gui(ydata$graphnumber) $noise]
    }
  }
#scale xdata by scaleA and scaleB
  set gui(xdata1$graphnumber) ""
  foreach x $gui(xdata0$graphnumber) {
    lappend gui(xdata1$graphnumber) [expr {$x*$gui(scaleB)+$gui(scaleA)}]
  }
#update graph
  if {$graphnumber} {
#  bottom
    .main.botgraph element configure line1 -xdata $gui(xdata11) -ydata $gui(ydata1)
    .main.botcontr.save configure -state normal
    .main.botcontr.sampletype configure -state readonly
  } else {
#  top
    .main.midgraph element configure line1 -xdata $gui(xdata10) -ydata $gui(ydata0)
    .main.midcontr.save configure -state normal
    .main.midcontr.sampletype configure -state readonly
  }
}


proc fitscale {graphnumber} {
  global gui
  if {$graphnumber == 1 && $gui(botgraphfitted) == 0} {
    return
  } elseif {$graphnumber == 0 && $gui(midgraphfitted) == 0} {
    return
  }
  set piby180 [expr {acos(0.0)/90.0}]
#pick peaks experimentaldata
  set avgpoints 8
  set ydata [savitzkygolay $gui(xdata0$graphnumber) $gui(ydata$graphnumber) $avgpoints]
  set noise [expr {$gui(noise$graphnumber)*sqrt(3.0*(3.0*$avgpoints*$avgpoints-7.0)/(4.0*$avgpoints*($avgpoints*$avgpoints-4.0)))}]
  set pickedpeakscurrentscale [peakpick $gui(xdata1$graphnumber) $gui(ydata$graphnumber) $noise]
#list of reference values
  set refnumber [lindex $gui(refdatasets) [lsearch $gui(sampletypes) $gui(sampletype$graphnumber)]]
  set txydatasortedbytheta [make2thetalist $refnumber]
  set refpeakscurrentscale ""
  foreach peak $txydatasortedbytheta {
    lappend refpeakscurrentscale [lindex $peak 0]
  }
#assign to each peak in reference list the closest peak found given the difference is not bigger than 0.1°
#result is stored as a list of pairs of index numbers
  set txdata ""
  set exdata ""
  foreach refpeak $refpeakscurrentscale {
    foreach exppeak $pickedpeakscurrentscale {
      if {[expr {abs($refpeak-[lindex $exppeak 0])}] < 0.1 } {
        lappend txdata $refpeak
        lappend exdata [expr {([lindex $exppeak 0]-$gui(scaleA))/$gui(scaleB)}]
      }
    }
  }
#linear regression
  set reslinregr [::math::statistics::linear-model $exdata $txdata]
  set gui(scaleA) [lindex $reslinregr 0]
  set gui(scaleB) [lindex $reslinregr 1]
  set gui(scaleAerror) [lindex $reslinregr 5]
  set gui(scaleBerror) [lindex $reslinregr 7]
  set gui(stddevy) [lindex $reslinregr 2]
  set gui(correlationcoefficient) [lindex $reslinregr 3]
  set gui(numpoints) [lindex $reslinregr 4]
#set scale
  updategraph
}


proc updategraph {} {
  global gui
#scale xdata by scaleA and scaleB
  set graphnumber 0
  set gui(xdata1$graphnumber) ""
  foreach x $gui(xdata0$graphnumber) {
    lappend gui(xdata1$graphnumber) [expr {$x*$gui(scaleB)+$gui(scaleA)}]
  }
  set graphnumber 1
  set gui(xdata1$graphnumber) ""
  foreach x $gui(xdata0$graphnumber) {
    lappend gui(xdata1$graphnumber) [expr {$x*$gui(scaleB)+$gui(scaleA)}]
  }
  .main.botgraph element configure line1 -xdata $gui(xdata11)
  .main.midgraph element configure line1 -xdata $gui(xdata10)
}


proc mousebindings {} {
  global gui
# gui(boxmode) 0 => inactive
# gui(boxmode) 1 => box is in the process of being changed; cursors refers to corner
# gui(boxmode) 2 => box is in the process of being changed; cursors refers to edge
# gui(boxmode) 3 => box is in the process of being changed; cursors refers to center
# center mode: if cursor is located inside the box once pressed
# edge mode:   if cursor is located on the edge of the box once pressed
# corner mode: otherwise
  .main.topimage configure -cursor "crosshair"
  set gui(x1s) 0
  set gui(y1s) 0
  set gui(x2s) 0
  set gui(y2s) 0
  set gui(boxmode) 0
  .main.topimage create rectangle [list $gui(x1s) $gui(y1s) $gui(x2s) $gui(y2s)] -tag box
  bind .main.topimage <Motion> {
    global gui
    set xs %x
    set ys %y
#box mode
    if {[expr {abs($gui(x2s)-$xs)+abs($gui(x1s)-$xs)}] < [expr {abs($gui(x2s)-$gui(x1s))+1}] &&\
        [expr {abs($gui(y2s)-$ys)+abs($gui(y1s)-$ys)}] < [expr {abs($gui(y2s)-$gui(y1s))+1}]} {
      .main.topimage configure -cursor "target"
      .main.topimage itemconfigure box -width 1
#edge mode
    } elseif {[expr {abs($gui(x2s)-$xs)+abs($gui(x1s)-$xs)}] < [expr {abs($gui(x2s)-$gui(x1s))+7}] &&\
              [expr {abs($gui(y2s)-$ys)+abs($gui(y1s)-$ys)}] < [expr {abs($gui(y2s)-$gui(y1s))+7}]} {
     .main.topimage configure -cursor "arrow"
     .main.topimage itemconfigure box -width 2
#outside: corner mode
    } else {
     .main.topimage configure -cursor "crosshair"
     .main.topimage itemconfigure box -width 1
    }
  }
  bind .main.topimage <ButtonPress-1> {
    global gui
#if pressed inside box => shift box => box mode
#if pressed on line => change edge box => edge mode
#if pressed elsewhere => set corner for new box => corner mode
    set xs %x
    set ys %y
#box mode
    if {[expr {abs($gui(x2s)-$xs)+abs($gui(x1s)-$xs)}] < [expr {abs($gui(x2s)-$gui(x1s))+1}] &&\
        [expr {abs($gui(y2s)-$ys)+abs($gui(y1s)-$ys)}] < [expr {abs($gui(y2s)-$gui(y1s))+1}]} {
      set gui(boxmode) 3
      set gui(xspressed) $xs
      set gui(yspressed) $ys
      set gui(xsold) $xs
      set gui(ysold) $ys
#edge mode
    } elseif {[expr {abs($gui(x2s)-$xs)+abs($gui(x1s)-$xs)}] < [expr {abs($gui(x2s)-$gui(x1s))+7}] &&\
              [expr {abs($gui(y2s)-$ys)+abs($gui(y1s)-$ys)}] < [expr {abs($gui(y2s)-$gui(y1s))+7}]} {
      set gui(boxmode) 2
#corner mode
    } else {
      set gui(boxmode) 1
    }
#corner mode
    if {$gui(boxmode)==1} {
      set gui(x1s) $xs
      set gui(y1s) $ys
      set gui(x2s) $xs
      set gui(y2s) $ys
      .main.topimage coords box [list $gui(x1s) $gui(y1s) $gui(x2s) $gui(y2s)]
#edge mode
    } elseif {$gui(boxmode)==2} {
      if       {[expr {abs($gui(x1s)-$xs)}]<5} {
        set gui(x1s) $xs
      } elseif {[expr {abs($gui(x2s)-$xs)}]<5} {
        set gui(x2s) $xs
      } elseif {[expr {abs($gui(y1s)-$ys)}]<5} {
        set gui(y1s) $ys
      } elseif {[expr {abs($gui(y2s)-$ys)}]<5} {
        set gui(y2s) $ys
      }
      .main.topimage coords box [list $gui(x1s) $gui(y1s) $gui(x2s) $gui(y2s)]
#box mode
    } elseif {$gui(boxmode)==3} {
      set gui(xsold) $xs
      set gui(ysold) $ys
    }
  }
  bind .main.topimage <B1-Motion> {
    global gui
    set xs %x
    set ys %y
#corner mode
    if {$gui(boxmode)==1 && $xs < $gui(picthumbw) && $ys < $gui(picthumbh)} {
      .main.topimage configure -cursor "arrow"
      set gui(x2s) $xs
      set gui(y2s) $ys
      .main.topimage coords box [list $gui(x1s) $gui(y1s) $gui(x2s) $gui(y2s)]
#edge mode
    } elseif {$gui(boxmode)==2} {
      if       {[expr {abs($gui(x1s)-$xs)}]<5 && $gui(picthumbw) > $xs} {
        set gui(x1s) $xs
      } elseif {[expr {abs($gui(x2s)-$xs)}]<5 && $gui(picthumbw) > $xs} {
        set gui(x2s) $xs
      } elseif {[expr {abs($gui(y1s)-$ys)}]<5 && $gui(picthumbh) > $ys} {
        set gui(y1s) $ys
      } elseif {[expr {abs($gui(y2s)-$ys)}]<5 && $gui(picthumbh) > $ys} {
        set gui(y2s) $ys
      }
      .main.topimage coords box [list $gui(x1s) $gui(y1s) $gui(x2s) $gui(y2s)]
#box mode
    } elseif {$gui(boxmode)==3} {
      .main.topimage configure -cursor "target"
      set xdiff [expr {$xs-$gui(xspressed)}]
      set ydiff [expr {$ys-$gui(yspressed)}]
      set xchange [expr {$xs-$gui(xsold)}]
      set ychange [expr {$ys-$gui(ysold)}]
      set gui(xsold) $xs
      set gui(ysold) $ys
#shift along x
      if       {[expr {abs($xdiff) > abs($ydiff)}] && $xchange > 0 && [expr {$gui(graphwidth) > $gui(x1s)+1}] && [expr {$gui(picthumbw) > $gui(x2s)+1}]} {
#        set gui(x1s) [expr {$gui(x1s)+1}]
#        set gui(x2s) [expr {$gui(x2s)+1}]
      } elseif {[expr {abs($xdiff) > abs($ydiff)}] && $xchange < 0 && [expr {0 <= $gui(x1s)-1}] && [expr {0 <= $gui(x2s)-1}]} {
#        set gui(x1s) [expr {$gui(x1s)-1}]
#        set gui(x2s) [expr {$gui(x2s)-1}]
#shift along y
      } elseif {[expr {abs($xdiff) < abs($ydiff)}] && $ychange > 0 && [expr {$gui(graphheight) > $gui(y1s)+1}] && [expr {$gui(picthumbh) > $gui(y2s)+1}]} {
        set gui(y1s) [expr {$gui(y1s)+1}]
        set gui(y2s) [expr {$gui(y2s)+1}]
      } elseif {[expr {abs($xdiff) < abs($ydiff)}] && $ychange < 0 && [expr {0 <= $gui(y1s)-1}] && [expr {0 <= $gui(y2s)-1}]} {
        set gui(y1s) [expr {$gui(y1s)-1}]
        set gui(y2s) [expr {$gui(y2s)-1}]
      }
      .main.topimage coords box [list $gui(x1s) $gui(y1s) $gui(x2s) $gui(y2s)]
    } else {
      .main.topimage configure -cursor "crosshair"
    }
  }
  bind .main.topimage <ButtonRelease-1> {
    global gui
    if {[expr {abs($gui(x2s)-$gui(x1s))}] > 30 && [expr {abs($gui(y2s)-$gui(y1s))}]> 10 } {
#activate take buttons
      .main.midcontr.take configure -state normal
      .main.botcontr.take configure -state normal
      set gui(boxmode) 0
    } else {
#deactivate take
      .main.midcontr.take configure -state disabled
      .main.botcontr.take configure -state disabled
    }
  }
}


proc hlp_message {args} {
    set width 600
    #
    # Set up the help window
    toplevel .hlp
    grab .hlp
    wm title .hlp "Help"
    wm minsize .hlp 600 300
    set fontbold "helvetica 10 bold"
    set fontnormal "helvetica 10 normal"
    #
    # Create the window areas
    frame .hlp.top -relief raised -bd 1
    pack .hlp.top -side top -fill both
    frame .hlp.bot -relief raised -bd 1
    pack .hlp.bot -side bottom -fill both
    #
    # Fill the top part with the message and the bitmap
    set i 0
    label .hlp.top.bitmap -bitmap ""
    pack .hlp.top.bitmap -side left -padx 3m -pady 3m
    foreach text $args {
        if {[expr {fmod($i,2)}]} {
            message .hlp.top.msg$i -width $width -text $text -justify left\
                    -font $fontnormal -anchor w
        } else {
            message .hlp.top.msg$i -width $width -text $text \
                    -font $fontbold
        }
        pack .hlp.top.msg$i -side top -fill x -padx 1m
        incr i
    }
    #
    # Create an exit button
    button .hlp.bot.exit -text Done -command {
        destroy .hlp
    }
    pack .hlp.bot.exit -padx 3m -pady 3m -fill both
    tkwait window .hlp
}


proc readimage {} {
  global gui
#disable buttons, reset entries
  .main.botcontr.take configure -state disabled
  .main.botcontr.save configure -state disabled
  .main.botcontr.sampletype configure -state disabled
  .main.midcontr.take configure -state disabled
  .main.midcontr.save configure -state disabled
  .main.midcontr.sampletype configure -state disabled
  set gui(botgraphfitted) 0
  .main.botcontr.chkbutton configure -state disabled
  set gui(midgraphfitted) 0
  .main.midcontr.chkbutton configure -state disabled
  set gui(sampletype0) "sample"
  set gui(sampletype1) "sample"
  set gui(scaleA) 0.0
  set gui(scaleB) 0.994
  erasedvalues 0
  erasedvalues 1
  set gui(xdata10) [list 0.0 100.0]
  set gui(xdata11) [list 0.0 100.0]
  set gui(ydata0) [list 0.0 0.0]
  set gui(ydata1) [list 0.0 0.0]
 .main.botgraph element configure line1 -xdata $gui(xdata11) -ydata $gui(ydata1)
 .main.midgraph element configure line1 -xdata $gui(xdata10) -ydata $gui(ydata0)
#if images exists delete
  set gui(gammascale) 10
  if {[array names gui pic] > -1} {
    image delete $gui(pic)
    unset gui(pic)
  }
  if {[array names gui picth] > -1} {
    image delete $gui(picth)
    unset gui(picth)
  }
  if {[array names gui imageexpdiff] > -1} {
    .main.topimage delete $gui(imageexpdiff)
    unset gui(imageexpdiff)
  }
#gel file
  if {[file extension $gui(filename)] == ".gel"} {
    set tiffinfo1 [::tiff::dimensions $gui(filename)]
    set picw [lindex $tiffinfo1 0]
    set pich [lindex $tiffinfo1 1]
    array set tiffinfo2 [::tiff::imageInfo $gui(filename)]
    set gui(picres) [expr {0.01/$tiffinfo2(XResolution)}]
    if {$pich > $picw} {
      if {[file exists "[file root $gui(filename)]-rot.gel"]} {
        file delete "[file root $gui(filename)]-rot.gel"
      }
      string2file "\
        open\(\"$gui(filename)\"\);\n\
        run\(\"Rotate 90 Degrees Right\"\);\n\
        saveAs\(\"TIF\", \"[file root $gui(filename)]-rot.gel\"\);\n\
       " "macro.imj"
      exec [auto_execok java] -jar /usr/share/java/ij.jar -Xmx1666m -batch macro.imj
      file rename "[file root $gui(filename)]-rot.tif" "[file root $gui(filename)]-rot.gel"
#      set gui(pic) [image create photo -gamma 1.0 -file "[file root $gui(filename)]-rot.gel"]
      set gui(filename) "[file root $gui(filename)]-rot.gel"
    }
    set gui(pic) [image create photo -gamma 1.0 -file $gui(filename)]
#tiff/tif file
  } elseif {[file extension $gui(filename)] == ".tif" || [file extension $gui(filename)] == ".tiff"} {
    set tiffinfo1 [::tiff::dimensions $gui(filename)]
    set picw [lindex $tiffinfo1 0]
    set pich [lindex $tiffinfo1 1]
    array set tiffinfo2 [::tiff::imageInfo $gui(filename)]
    set gui(picres) [expr {0.01/$tiffinfo2(XResolution)}]
    if {$pich > $picw} {
      if {[file exists "[file root $gui(filename)]-rot.tif"]} {
        file delete "[file root $gui(filename)]-rot.tif"
      }
      string2file "\
        open\(\"$gui(filename)\"\);\n\
        run\(\"Rotate 90 Degrees Right\"\);\n\
        saveAs\(\"TIF\", \"[file root $gui(filename)]-rot.tif\"\);\n\
       " "macro.imj"
      exec [auto_execok java] -jar /usr/share/java/ij.jar -Xmx1666m -batch macro.imj
#      set gui(pic) [image create photo -gamma 0.01 -file "[file root $gui(filename)]-rot.tif"]
      set gui(filename) "[file root $gui(filename)]-rot.tif"
    }
    set gui(pic) [image create photo -file $gui(filename)]
#png file
  } elseif {[file extension $gui(filename)] == ".png"} {
    set pnginfo1 [exec [auto_execok pnginfo] $gui(filename)]
    for {set i 0} {$i < [llength $pnginfo1]} {incr i} {
      if {[lindex $pnginfo1 $i] == "Resolution:"} {
        incr i
        set gui(picres) [expr {1.0/[string trimright [lindex $pnginfo1 $i] ,]}]
      } elseif {[lindex $pnginfo1 $i] == "Length:"} {
        incr i
        set pich [lindex $pnginfo1 $i]
      } elseif {[lindex $pnginfo1 $i] == "Width:"} {
        incr i
        set picw [lindex $pnginfo1 $i]
      }
    }
    if {$pich > $picw} {
      if {[file exists "[file root $gui(filename)]-rot.png"]} {
        file delete "[file root $gui(filename)]-rot.png"
      }
      string2file "\
        open\(\"$gui(filename)\"\);\n\
        run\(\"Rotate 90 Degrees Right\"\);\n\
        saveAs\(\"PNG\", \"[file root $gui(filename)]-rot.png\"\);\n\
       " "macro.imj"
      exec [auto_execok java] -jar /usr/share/java/ij.jar -Xmx1666m -batch macro.imj
#      set gui(pic) [image create photo -gamma 0.1 -file "[file root $gui(filename)]-rot.png"]
      set gui(filename) "[file root $gui(filename)]-rot.png"
    }
    set gui(pic) [image create photo -file $gui(filename)]
  }
  if {$gui(filename) != ""} {
    if {[file extension $gui(filename)] == ".tif" || [file extension $gui(filename)] == ".tiff"} {
      set gui(picth) [image create photo -gamma 0.3]
    } elseif {[file extension $gui(filename)] == ".gel"} {
      set gui(picth) [image create photo -gamma 1.0]
    } else {
      set gui(picth) [image create photo -gamma 0.1]
    }
    set gui(pich) [image height $gui(pic)]
    set gui(picw) [image width $gui(pic)]
    set gui(subsamplew) [expr {$gui(picw)/$gui(imagewidth)+1}]
    set gui(subsampleh) [expr {$gui(pich)/$gui(imageheight)+1}]
    $gui(picth) copy $gui(pic) -subsample $gui(subsamplew) $gui(subsampleh)
    set gui(imageexpdiff) [.main.topimage create image 0 0 -anchor nw -image $gui(picth)]
    .main.topimage raise box
    mousebindings
    set gui(picthumbh) [image height $gui(picth)]
    set gui(picthumbw) [image width $gui(picth)]
    .main.topimage configure -width $gui(picthumbw) -height $gui(picthumbh)
    .status.msg configure -text "size (original): $gui(picw)\x$gui(pich)     size (screen): $gui(picthumbw)\x$gui(picthumbh)"
    wm title . "IP reader-$gui(version), filename:[lindex [file split $gui(filename)] end]"
  } else {
    .status.msg configure -text ""
    set gui(filename) empty
    wm title . "IP reader-$gui(version), filename:[lindex [file split $gui(filename)] end]"
  }
}


proc updategamma {gammascale} {
  global gui
  array set gammalookup {
  1 0.005
  2 0.01
  3 0.02
  4 0.04
  5 0.08
  6 0.16
  7 0.32
  8 0.64
  9 1.0
  10 1.5
  11 2.25
  12 3.375
  13 5.06
  14 7.59
  15 11.4
  16 25.6
  17 38.4
  18 57.7
  19 86.5
  20 129.8
  }
  set gui(gamma) $gammalookup($gammascale)
  if {$gui(filename) != ""} {
    if {[file extension $gui(filename)] == ".tif" || [file extension $gui(filename)] == ".tiff"} {
      set gui(picth) [image create photo -gamma $gui(gamma)]
    } elseif {[file extension $gui(filename)] == ".gel"} {
      set gui(picth) [image create photo -gamma $gui(gamma)]
    } else {
      set gui(picth) [image create photo -gamma $gui(gamma)]
    }
    set gui(pich) [image height $gui(pic)]
    set gui(picw) [image width $gui(pic)]
    set gui(subsamplew) [expr {$gui(picw)/$gui(imagewidth)+1}]
    set gui(subsampleh) [expr {$gui(pich)/$gui(imageheight)+1}]
    $gui(picth) copy $gui(pic) -subsample $gui(subsamplew) $gui(subsampleh)
    set gui(imageexpdiff) [.main.topimage create image 0 0 -anchor nw -image $gui(picth)]
    .main.topimage raise box
    mousebindings
    set gui(picthumbh) [image height $gui(picth)]
    set gui(picthumbw) [image width $gui(picth)]
  }
}


# PROC readrawfile name_of_raw_file
# Description:
proc readrawfile {name_of_raw_file} {
  if {[file exists $name_of_raw_file]} {
    if [catch {open $name_of_raw_file RDONLY} f] {
    } else {
      while {1} {
        gets $f zeile
        if [eof $f] break
        lappend field_of_ref $zeile
      }
      close $f
    }
  } else {
    puts "File $name_of_raw_file does not exist!"
    set field_of_ref ""
  }
  return $field_of_ref
}


proc peakpick {xdata ydata noise} {
#principle: determine two gliding averages over (two different) iavg points; when
#           difference between overcomes a threshold of nfactor1*$noise find next maximum
#           when maximum had been found proceed without searching for new maximum until nfactor2*noise away from y(max)
#assumptions: sharp well defined peaks allow to make estimates for iavg and nfactor
  global gui
  set noise [expr {$noise/$gui(maxyvalue)}]
  set peaklist ""
  set nfactor1 35.5
  set nfactor2 35.5
#  set nfactor1 20.5
#  set nfactor2 9.5
  set iavg1 4
  set iavg2 28
  set avg1 0.0
  set avg2 0.0
  for {set i [expr {$iavg2-$iavg1}]} {$i < $iavg2} {incr i} {
    set avg1 [expr {[lindex $ydata $i]/$gui(maxyvalue)+$avg1}]
  }
  for {set i 0} {$i < $iavg2} {incr i} {
    set avg2 [expr {[lindex $ydata $i]/$gui(maxyvalue)+$avg2}]
  }
  for {set i $iavg2} {$i < [llength $ydata]} {incr i} {
    set avg1 [expr {$avg1 + ([lindex $ydata $i] - [lindex $ydata [expr {$i-$iavg1}]])/$gui(maxyvalue)}]
    set avg2 [expr {$avg2 + ([lindex $ydata $i] - [lindex $ydata [expr {$i-$iavg2}]])/$gui(maxyvalue)}]
    if {[expr {$noise*$nfactor1}] < [expr {$avg1/$iavg1- $avg2/$iavg2}] } {
      incr i
      set avg1 [expr {$avg1 + ([lindex $ydata $i] - [lindex $ydata [expr {$i-$iavg1}]])/$gui(maxyvalue)}]
      set avg2 [expr {$avg2 + ([lindex $ydata $i] - [lindex $ydata [expr {$i-$iavg2}]])/$gui(maxyvalue)}]
      set max -999999
      set imax -999999
      while {$i < [expr {[llength $ydata]-1}] && ([expr {$max-$nfactor2*$noise}] < [expr {[lindex $ydata $i]/$gui(maxyvalue)}] || [expr {$imax+$iavg2}] > $i)} {
        if {$max < [expr {[lindex $ydata $i]/$gui(maxyvalue)}]} {
          set max [expr {[lindex $ydata $i]/$gui(maxyvalue)}]
          set imax $i
        }
        incr i
        set avg1 [expr {$avg1 + ([lindex $ydata $i] - [lindex $ydata [expr {$i-$iavg1}]])/$gui(maxyvalue)}]
        set avg2 [expr {$avg2 + ([lindex $ydata $i] - [lindex $ydata [expr {$i-$iavg2}]])/$gui(maxyvalue)}]
      }
      set x1 [lindex $xdata $imax]
      set x2 [lindex $xdata [expr {$imax+1}]]
      set x3 [lindex $xdata [expr {$imax-1}]]
      set y1 [expr {[lindex $ydata $imax]/$gui(maxyvalue)}]
      set y2 [expr {[lindex $ydata [expr {$imax+1}]]/$gui(maxyvalue)}]
      set y3 [expr {[lindex $ydata [expr {$imax-1}]]/$gui(maxyvalue)}]
      set a [expr {($x1*($y3-$y2)-$x2*$y3+$x3*$y2+($x2-$x3)*$y1)/($x1*($x3*$x3-$x2*$x2)-$x2*$x3*$x3+$x2*$x2*$x3+$x1*$x1*($x2-$x3))}]
      set b [expr {-($x1*$x1*($y3-$y2)-$x2*$x2*$y3+$x3*$x3*$y2+($x2*$x2-$x3*$x3)*$y1)/($x1*($x3*$x3-$x2*$x2)-$x2*$x3*$x3+$x2*$x2*$x3+$x1*$x1*($x2-$x3))}]
      set c [expr {($x1*($x3*$x3*$y2-$x2*$x2*$y3)+$x1*$x1*($x2*$y3-$x3*$y2)+($x2*$x2*$x3-$x2*$x3*$x3)*$y1)/($x1*($x3*$x3-$x2*$x2)-$x2*$x3*$x3+$x2*$x2*$x3+$x1*$x1*($x2-$x3))}]
      if {$a != 0.0 && $b != 0.0 && $c != 0.0} {
        set xmax [expr {-$b/2.0/$a}]
        set ymax [expr {($a*$xmax*$xmax+$b*$xmax+$c)*$gui(maxyvalue)}]
        lappend peaklist [list $xmax $ymax]
      }
    }
  }
  return $peaklist
}


# PROC string2file (String, filename, Bool)
# Description:
# writes a string into a file. If file exists, it will overwrite the existing 
# file. It is possible to append the string to the filename by setting the 
# option to True
proc string2file {string nameoffile {boolappend 0}} {
  if {1!=$boolappend} {
    file delete -force  $nameoffile
  }
  set channel [open $nameoffile a+]
  puts  $channel $string
  eof   $channel
  close $channel
}


proc erasedvalues {graphnum} {
  global gui
  if {$gui(sampletype$graphnum) != "sample"} {
    set refnum [lindex $gui(refdatasets) [lsearch $gui(sampletypes) $gui(sampletype$graphnum)]]
    set i 0
    foreach hkl [lindex $gui($refnum) 1] {
      if {$graphnum == 1} {
        .main.botgraph marker delete marker$i
      } elseif {$graphnum == 0} {
        .main.midgraph marker delete marker$i
      }
      incr i
    }
  } else {
    if {$graphnum == 1} {
      set gui(botgraphfitted) 1
      .main.botcontr.chkbutton configure -state disabled
      if {[winfo exists .main.botgraph] && [.main.botgraph marker exists marker0]} {
        foreach marker [.main.botgraph marker names marker*] {.main.botgraph marker delete $marker}
      }
    } elseif {$graphnum == 0} {
      set gui(midgraphfitted) 1
      .main.midcontr.chkbutton configure -state disabled
      if {[winfo exists .main.midgraph] && [.main.midgraph marker exists marker0]} {
        foreach marker [.main.midgraph marker names marker*] {.main.midgraph marker delete $marker}
      }
    }
  }
}


proc make2thetalist {refnum} {
  global gui
  set piby180 [expr {acos(0.0)/90.0}]
#set lattice parameters
  set a [lindex [lindex $gui($refnum) 0] 0]
  set b [lindex [lindex $gui($refnum) 0] 1]
  set c [lindex [lindex $gui($refnum) 0] 2]
  set alpha [lindex [lindex $gui($refnum) 0] 3]
  set beta [lindex [lindex $gui($refnum) 0] 4]
  set gamma [lindex [lindex $gui($refnum) 0] 5]
  set i 0
  set txydatasortedbytheta ""
  foreach hkl [lindex $gui($refnum) 1] {
    set dvalue [hkl2dvalue $a $b $c $alpha $beta $gamma [lindex $hkl 1] [lindex $hkl 2] [lindex $hkl 3]]
    if {$dvalue >= [expr $gui(wavelength)/2.0]} {
      set theta [expr {asin($gui(wavelength)/$dvalue/2.0)/$piby180*2.0}]
#Intensities need to be corrected for Guinier geometry XXX
      lappend txydatasortedbytheta [list $theta [expr {[lindex $hkl 0]}]]
    }
  }
#cleanup reflection list:
#  add intensity of reflections with the same 2theta value
#  same means smaller difference than 0.00001°
  set txydatasortedbytheta [lsort -real -increasing -index 0 $txydatasortedbytheta]
  set newlist ""
  for {set i 0} {$i < [llength $txydatasortedbytheta]} {incr i} {
    set theta [lindex [lindex $txydatasortedbytheta $i] 0]
    set inten [lindex [lindex $txydatasortedbytheta $i] 1]
    set indexoftwin -1
    for {set j 0} {$j < [llength $newlist]} {incr j} {
      if {[expr {abs([lindex [lindex $newlist $j] 0]-$theta)}] < 0.00001} {
        set indexoftwin $j
        lset newlist $indexoftwin 1 [expr {[lindex [lindex $newlist $indexoftwin] 1]+$inten}]
        break
      }
    }
    if {$indexoftwin < 0} {
      lappend newlist [lindex $txydatasortedbytheta $i]
    }
  }
  return $newlist
}

proc drawdvalues {graphnum} {
  global gui
  if {$gui(sampletype$graphnum) != "sample"} {
    if {$graphnum == 1} {
      set gui(botgraphfitted) 1
      .main.botcontr.chkbutton configure -state normal
    } elseif {$graphnum == 0} {
      set gui(midgraphfitted) 1
      .main.midcontr.chkbutton configure -state normal
    }
    set refnum [lindex $gui(refdatasets) [lsearch $gui(sampletypes) $gui(sampletype$graphnum)]]
    set piby180 [expr {acos(0.0)/90.0}]
#set lattice parameters
    set txydatasortedbytheta [make2thetalist $refnum]
    set txydatasortedbyint   [lsort -real -decreasing -index 1 $txydatasortedbytheta]
    set norm [lindex [lindex $txydatasortedbyint 0] 1]
    set thetamax [lindex [lindex $txydatasortedbyint 0] 0]
#calculate d-values, theta-values and intensities
#suppress if thetavalues are out of range
    set i 0
    foreach peak $txydatasortedbytheta {
      set theta [lindex $peak 0]
      set int [expr {[lindex $peak 1]/$norm*$gui(ydatamax$graphnum)}]
      if {$graphnum == 1 && [lindex $peak 0] < 180.0} {
        .main.botgraph marker create line -name marker$i -coords [list $theta 0.0 $theta $int] -outline blue
      } elseif {$graphnum == 0 &&  [lindex $peak 0] < 180.0} {
        .main.midgraph marker create line -name marker$i -coords [list $theta 0.0 $theta $int] -outline blue
      }
      incr i
    }
#calculate scale parameters
#1.) find biggest peak
    set exydatasortedbytheta [lsort -real -increasing -index 0 $gui(pickedpeaks$graphnum)]
    set exydatasortedbyint   [lsort -real -decreasing -index 1 $exydatasortedbytheta]
    set exdata ""
    foreach xy $exydatasortedbytheta {
      lappend exdata [lindex $xy 0]
    }
#IP contains no saturated area but too few points
    if {[llength $exydatasortedbyint] == 1 && [lindex [lindex $exydatasortedbyint 0] 1] < [expr {0.97*$gui(maxyvalue)}]} {
      set gui(scaleA) [expr {(-[lindex [lindex $exydatasortedbyint 0] 0]*$gui(scaleB)+$thetamax)}]
      set gui(scaleB) 0.99401602354
      set gui(scaleAerror) -1
      set gui(scaleBerror) -1
      set gui(numpoints) -1
#IP contains no saturated area and two points
    } elseif {[llength $exydatasortedbyint] == 2 && [lindex [lindex $exydatasortedbyint 0] 1] < [expr {0.97*$gui(maxyvalue)}]} {
# exydatasortedbyint exydatasortedbytheta txydatasortedbyint txydatasortedbytheta
      #assign biggest peak
      #from this and the neigboring peak setup scale
#ex*scaleB+scaleA = tx
#(tx0-tx1)/(ex0-ex1) = scaleB
      set biggestintheoindex [lsearch -index 0 $txydatasortedbytheta [lindex [lindex $txydatasortedbyint 0] 0]]
      if {[lindex [lindex $exydatasortedbyint 0] 0] < [lindex [lindex $exydatasortedbyint 1] 0]} {
        set gui(scaleB) [expr {([lindex [lindex $txydatasortedbyint 0] 0]-[lindex [lindex $txydatasortedbytheta [expr {$biggestintheoindex+1}]] 0])/([lindex [lindex $exydatasortedbyint 0] 0]-[lindex [lindex $exydatasortedbyint 1] 0])}]
        set gui(scaleA) [expr {(-[lindex [lindex $exydatasortedbyint 0] 0]*$gui(scaleB)+[lindex [lindex $txydatasortedbyint 0] 0])}]
        set gui(scaleAerror) -1
        set gui(scaleBerror) -1
        set gui(numpoints) -1
      } else {
        set gui(scaleB) [expr {([lindex [lindex $txydatasortedbyint 0] 0]-[lindex [lindex $txydatasortedbytheta [expr {$biggestintheoindex-1}]] 0])/([lindex [lindex $exydatasortedbyint 0] 0]-[lindex [lindex $exydatasortedbyint 1] 0])}]
        set gui(scaleA) [expr {(-[lindex [lindex $exydatasortedbyint 0] 0]*$gui(scaleB)+[lindex [lindex $txydatasortedbyint 0] 0])}]
        set gui(scaleAerror) -1
        set gui(scaleBerror) -1
        set gui(numpoints) -1
      }
#IP contains no saturated area and sufficient points
    } elseif {[llength $exydatasortedbyint] > 2 && [lindex [lindex $exydatasortedbyint 0] 1] < [expr {$gui(maxyvalue)*0.97}]} {
#assign peaks:
#try different biggest peaks and take best correlation
      set fittedscales ""
      for {set k 0} {$k < 5 && $k < [llength $exydatasortedbyint]} {incr k} {
        set gui(scaleB) 0.99401602354
        set gui(scaleA) [expr {(-[lindex [lindex $exydatasortedbyint $k] 0]*$gui(scaleB)+[lindex [lindex $txydatasortedbyint 0] 0])}]
        set gui(scaleAerror) -1
        set gui(scaleBerror) -1
        set gui(numpoints) -1
        set exp2theo [list [list $k 0]]
#2.) then assign by difference in theta values
        for {set i 0} {$i < [llength $txydatasortedbyint] && $i < [llength $exydatasortedbyint]} {incr i} {
#match i-th experimental data point with j-th (= smallesti) theoretical peak
          if {$i != $k} {
            set x [lindex [lindex $exydatasortedbyint $i] 0]
            set xcor [expr {$gui(scaleB)*$x+$gui(scaleA)}]
            set diffxlist ""
            foreach tx $txydatasortedbyint {
              lappend diffxlist [expr {abs($xcor-[lindex $tx 0])}]
            }
            set smallesti -9
            set smallestxdiff 1.0E50
            set j 0
            foreach diffx $diffxlist {
              if {$diffx < $smallestxdiff} {
                set smallesti $j
                set smallestxdiff $diffx
              }
              incr j
            }
            if {$smallestxdiff < 5.0 && [lsearch -index 1 $exp2theo $smallesti] == -1} {
              lappend exp2theo [list $i $smallesti]
            }
#calc new scaleA scaleB
            set exdata ""
            set txdata ""
            foreach pair $exp2theo {
              lappend exdata [lindex [lindex $exydatasortedbyint [lindex $pair 0]] 0]
              lappend txdata [lindex [lindex $txydatasortedbyint [lindex $pair 1]] 0]
            }
            if {[llength $txdata] > 2} {
              set reslinregr [::math::statistics::linear-model $exdata $txdata]
              set gui(scaleA) [lindex $reslinregr 0]
              set gui(scaleB) [lindex $reslinregr 1]
              set gui(scaleAerror) [lindex $reslinregr 5]
              set gui(scaleBerror) [lindex $reslinregr 7]
              set gui(stddevy) [lindex $reslinregr 2]
              set gui(correlationcoefficient) [lindex $reslinregr 3]
              set gui(numpoints) [lindex $reslinregr 4]
#    (Estimate of) Intercept A
#    (Estimate of) Slope B
#    Standard deviation of Y relative to fit
#    Correlation coefficient R2
#    Number of degrees of freedom df
#    Standard error of the intercept A
#    Significance level of A
#    Standard error of the slope B
#    Significance level of B
            } else {
            }
          } else {
            set reslinregr [list $gui(scaleA) $gui(scaleB) 0 0.0 [list [list $k $i]]]
          }
        }
        lappend fittedscales [list [lindex $reslinregr 0] [lindex $reslinregr 1] [lindex $reslinregr 2] [lindex $reslinregr 3] $exp2theo]
      }
      set sortedscales [lsort -real -index 3 -decreasing $fittedscales]
      set bestfit [lindex $sortedscales 0]
      set gui(scaleA) [lindex $bestfit 0]
      set gui(scaleB) [lindex $bestfit 1]
      set gui(stddevy) [lindex $bestfit 2]
      set gui(correlationcoefficient) [lindex $bestfit 3]
      set exp2theo [lindex $bestfit 4]
#exclude outlier
      if {[lindex $bestfit 2] > 0} {
        set exdata ""
        set txdata ""
        foreach pair $exp2theo {
          if {[expr {$gui(scaleB)*[lindex [lindex $exydatasortedbyint [lindex $pair 0]] 0]+$gui(scaleA)-[lindex [lindex $txydatasortedbyint [lindex $pair 1]] 0]}] < [expr {[lindex $bestfit 2]*2.5}] } {
            lappend exdata [lindex [lindex $exydatasortedbyint [lindex $pair 0]] 0]
            lappend txdata [lindex [lindex $txydatasortedbyint [lindex $pair 1]] 0]
          }
          if {[llength $txdata] > 4} {
            set reslinregr [::math::statistics::linear-model $exdata $txdata]
            set gui(scaleA) [lindex $reslinregr 0]
            set gui(scaleB) [lindex $reslinregr 1]
            set gui(stddevy) [lindex $reslinregr 2]
            set gui(correlationcoefficient) [lindex $reslinregr 3]
            set gui(scaleAerror) [lindex $reslinregr 5]
            set gui(scaleBerror) [lindex $reslinregr 7]
            set gui(numpoints) [lindex $reslinregr 4]
          }
        }
      }
    }
#IP contains saturated area
  } elseif {[info exists exydatasortedbyint] && [llength $exydatasortedbyint] > 1 && [lindex [lindex $exydatasortedbyint 0] 1] > [expr {$gui(maxyvalue)*0.97}]} {
      set gui(scaleA) [expr {(-[lindex [lindex $exydatasortedbyint 1] 0]*$gui(scaleB)+$thetamax)}]
  }
#recalculate xscales and update both diagrams
  updategraph
}


proc manualscale {} {
  global gui
  updategraph
  if {$gui(sampletype1) != "sample"} {
    set gui(botgraphfitted) 0
  }
  if {$gui(sampletype0) != "sample"} {
    set gui(midgraphfitted) 0
  }
}


proc configureMain {win width height} {
  #puts "configureMain $win $width $height"
  global gui
  set graphwidth [expr $width-150]
  set graphheight [expr $height/3-40]
  set gui(imagewidth) $graphwidth
  set gui(imageheight) $graphheight
  $win.midgraph configure -width $graphwidth -height $graphheight
  $win.botgraph configure -width $graphwidth -height $graphheight
  $win.topimage configure -width $graphwidth -height $graphheight
  bind .main <Configure> {}
}


proc maingui {} {
  global gui
  wm title . "IP reader-$gui(version), filename:[lindex [file split $gui(filename)] end]"
#initialize canvas
  frame .menu -relief raised -borderwidth 2
  frame .main
#menu
  menubutton .menu.help -text "?" -menu .menu.help.m -underline 0
  menubutton .menu.file -text "file" -menu .menu.file.m -underline 0
#menubutton .menu.view -text "view" -menu .menu.view.m -underline 0
  menu .menu.help.m -tearoff 0
  menu .menu.file.m -tearoff 0
#menu .menu.view.m -tearoff 0
  .menu.help.m add command -label "help" -command {
    hlp_message {IP reader} \
            {This program is supposed to help analyze scanned images from powder diffraction.}\
            {File formats} {gel-format (GE, Fujitsu); tif (16bit); png (imported as 8bit even if it has higher resolution)}\
            {Usage} {The program is written in the scripting language TCL/TK.}\
            {Missing} {The peak positions are determined using non-linear interpolation. The calibration vs reflection positions of a known reference compound uses linear regression. The bigger the box perpendicular to the angular scale the better the signal to noise.}\
            {Note} {Mental support in form of friendly emails is always welcome.}\
            {copyright (C) 2013-2022 Joern Schmedt auf der Guenne} {
This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. A copy of the GNU General Public License was distributed along with this program; if not, see <http://www.gnu.org/licenses/>.}\
}
  .menu.file.m add command -label "load image" -command {
    set filetypes [list {gel-file .gel} {tiff-file .tiff} {tiff-file .tif} {png-file .png}]
    set gui(filename) [tk_getOpenFile -title "open diffractogram" -filetypes $filetypes]
    readimage}
  .menu.file.m add command -label "exit program" -command {exit 0}
#top image
  frame .main.topcontr
  canvas .main.topimage -width $gui(imagewidth) -height $gui(imageheight)
  ttk::combobox .main.topcontr.radiation -state readonly -values $gui(radiations) -width 15 -textvariable gui(radiation)
  label .main.topcontr.label -text "\n2theta = A+B*x"
  spinbox .main.topcontr.scaleA -textvariable gui(scaleA) -from 0.0 -to 180.0 -increment 0.05 -command manualscale -takefocus 1
  spinbox .main.topcontr.scaleB -textvariable gui(scaleB) -from 0.001 -to 1000.0 -increment 0.001 -command manualscale -takefocus 1
  label .main.topcontr.gammalabel -text "\nbrightness"
  scale .main.topcontr.gamma -variable gui(gammascale) -command updategamma -from 1 -to 20 -orient horizontal
  bind .main.topcontr.scaleA <Return> {
    if {[string is double $gui(scaleA)]} {
      manualscale
    } else {
      set gui(scaleA) 0.0
      manualscale
    }
  }
  bind .main.topcontr.scaleA <Return> {
    if {[string is double $gui(scaleA)]} {
      manualscale
    } else {
      set gui(scaleA) 1.0
      manualscale
    }
  }
  bind .main.topcontr.scaleB <Return> {
    if {[string is double $gui(scaleB)]} {
      manualscale
    } else {
      set gui(scaleB) 1.0
      manualscale
    }
  }
  bind .main.topcontr.scaleB <Return> {
    if {[string is double $gui(scaleB)]} {
      manualscale
    } else {
      set gui(scaleB) 1.0
      manualscale
    }
  }
  pack .main.topcontr.radiation .main.topcontr.gammalabel .main.topcontr.gamma .main.topcontr.label .main.topcontr.scaleA .main.topcontr.scaleB
#middle graph
  frame .main.midcontr
  ttk::combobox .main.midcontr.sampletype -values $gui(sampletypes) -width 15 -textvariable gui(sampletype0) -postcommand {erasedvalues 0} -state disabled
  checkbutton .main.midcontr.chkbutton -variable gui(midgraphfitted) -text "fitted" -state disabled -command {fitscale 0 ; fitscale 0}
  pack .main.midcontr.sampletype .main.midcontr.chkbutton
  blt::graph .main.midgraph -background white -plotbackground white -width $gui(graphwidth) -height $gui(graphheight)
  .main.midgraph element create line1 \
      -xdata {0.0 120.0} \
      -ydata {0.0 0.0} -symbol no -color black
  .main.midgraph legend configure -hide yes
  .main.midgraph axis configure x -title "2 theta"
#  .main.midgraph axis configure x -title "2 theta" -titlefont *-Helvetica-Bold-R-Normal-*-18-140-* -tickfont *-Helvetica-Bold-R-Normal-*-14-140-* -subdivisions 5 -descending 1
#  .main.midgraph axis configure y -title "intensity/a.u." -titlefont *-Helvetica-Bold-R-Normal-*-18-140-* -tickfont *-Helvetica-Bold-R-Normal-*-14-140-* -subdivisions 5
  button .main.midcontr.take -command {takeboxselection 0} -text "take selection" -state disabled
  button .main.midcontr.save -command {savediff 0} -text "save diffractogram" -state disabled
#bottom graph
  frame .main.botcontr
  ttk::combobox .main.botcontr.sampletype -values $gui(sampletypes) -width 15 -textvariable gui(sampletype1) -postcommand {erasedvalues 1} -state disabled
  checkbutton .main.botcontr.chkbutton -variable gui(botgraphfitted) -text "fitted" -state disabled -command {fitscale 1; fitscale 1}
  pack .main.botcontr.sampletype .main.botcontr.chkbutton
  blt::graph .main.botgraph -background white -plotbackground white -width $gui(graphwidth) -height $gui(graphheight)
  .main.botgraph element create line1 \
    -xdata {0.0 120.0} \
    -ydata {0.0 0.0} -symbol no -color black
  .main.botgraph legend configure -hide yes
  .main.botgraph axis configure x -title "2 theta"
#  .main.botgraph axis configure x -title "2 theta" -titlefont *-Helvetica-Bold-R-Normal-*-18-140-* -tickfont *-Helvetica-Bold-R-Normal-*-14-140-* -subdivisions 5 -descending 1
#  .main.botgraph axis configure y -title "intensity/a.u." -titlefont *-Helvetica-Bold-R-Normal-*-18-140-* -tickfont *-Helvetica-Bold-R-Normal-*-14-140-* -subdivisions 5
  button .main.botcontr.take -command {takeboxselection 1} -text "take selection" -state disabled
  button .main.botcontr.save -command {savediff 1} -text "save diffractogram" -state disabled
#status line
  frame .status -bd 1 -relief flat
  label .status.msg -relief sunken -bd 2 -text ""
#fill screen
  pack .menu.help -side right
  pack .menu.file -side left
#pack .menu.view -side left
  tk_menuBar .menu .menu.file .menu.help
  pack .menu -side top -fill x
  pack .main
  grid .main.topcontr .main.topimage
  grid .main.midcontr .main.midgraph
  pack .main.midcontr.take -fill x
  pack .main.midcontr.save -fill x
  grid .main.botcontr .main.botgraph
  pack .main.botcontr.take -fill x
  pack .main.botcontr.save -fill x
  pack .status -fill x
  pack .status.msg -side left -expand true -fill x
  bind .main.midcontr.sampletype <<ComboboxSelected>> {
    set graphnum 0
    drawdvalues $graphnum
  }
  bind .main.botcontr.sampletype <<ComboboxSelected>> {
    set graphnum 1
    drawdvalues $graphnum
  }
  bind .main.topcontr.radiation <<ComboboxSelected>> {
    set gui(wavelength) [lindex $gui(wavelengths) [lsearch $gui(radiations) $gui(radiation)]]
    drawdvalues 0
    drawdvalues 1
  }
  bind .main <Configure> [list configureMain %W %w %h]
  wm geometry . +0+0
}
##############################
#main program
maingui
update idletasks

if {[llength $argv]==1} {
  set gui(filename) [lindex $argv 0]
  readimage
} elseif {[llength $argv]==0} {
  set gui(filename) ""
} else {
  puts "\n\nsyntax: ipreader filename"
  puts "filename   = filename of a png graphic"
  exit 1
}
